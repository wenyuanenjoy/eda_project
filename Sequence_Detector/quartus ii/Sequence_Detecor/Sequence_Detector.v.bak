module Sequence_Detector
(
	RST_B,
	SYSCLK,
	IN_VALID,
	MODE,
	DATA_IN,
	OUT_VALID,
	DATA_OUT 
);

//declaration
input RST_B;
input SYSCLK;
input IN_VALID;
input MODE;
input DATA_IN;
output OUT_VALID;
output DATA_OUT;

//type
wire [1:0] MODE;
wire [3:0] DATA_IN;
reg        OUT_VALID;
reg  [3:0] DATA_OUT;

//parameter
parameter idle=3'b000;
parameter increment=3'b001;
parameter decrement=3'b010;
parameter steady=3'b011;
parameter done=3'b100;


//fsm
reg [1:0] fsm_cs;
reg [1:0] fsm_ns;

//record register
reg [3:0] data_cs;
wire [3:0] data_pre;
reg [1:0] mode_pre;
reg [1:0] mode_cs;
reg [2:0] counter;
reg [2:0] counter_ns;
 
//constinunity
assign data_pre=DATA_IN;
assign mode_pre=MODE;

//fsm_state sequence
always@(posedge SYSCLK or negedge RST_B)
begin
	if(!RST_B)
	 fsm_cs<=idle;
	else
	 fsm_cs<=fsm_ns;
end

//record pre_data to data_cs
always@(posedge SYSCLK or negedge RST_B)
begin
	if(!RST_B)
	 data_cs<=4'b0;
	else
	begin
	 data_cs<=data_pre;
	end
end

//counter
always@(posedge SYSCLK or negedge RST_B)
begin
	if(!RST_B)
	 counter<=0;
	else
	 counter<=counter_ns;
end

//record pre_mode to mode_cs
always@(posedge SYSCLK or negedge RST_B)
begin
	if(!RST_B)
	 mode_cs<=2'b0;
	else
	 mode_cs<=mode_pre; 
end

//counter combination
always@(*)
begin
	case(fsm_cs)
	idle:counter_ns=0;
	increment:
	begin
	 if(!IN_VALID && MODE!=3 && DATA_IN==data_cs+1)
	  counter_ns=counter+1;
	 else if(DATA_IN!=data_cs+1 | MODE!=mode_cs)
	       counter_ns=0;
	      else 
			 counter_ns=counter;	   
	end
	decrement:
	begin
	 if(!IN_VALID && MODE!=3 && DATA_IN==data_cs-1)
	  counter_ns=counter+1;
	 else if(DATA_IN!=data_cs-1 | MODE!=mode_cs)
			 counter_ns=0;
			else
			 counter_ns=counter;
	end
	steady:
	begin
	 if(!IN_VALID && MODE!=3 &&DATA_IN==data_cs)
	  counter_ns=counter+1;
	 else if(DATA_IN!=data_cs | MODE!=mode_cs)
	       counter_ns=0;
			else
			 counter_ns=counter;
	end
	done:
	begin
	//counter idle
	end
	default:counter_ns=0;
	endcase
end



//fsm_next_state combination
always@(*)
begin
	case(fsm_cs)
	idle:
	begin
	 if((!IN_VALID)| (MODE==3))//input invalid-->stay origin
	  fsm_ns=idle;
	 else if(IN_VALID)
	       begin
			 case(MODE)
			 0:fsm_ns=increment;
			 1:fsm_ns=decrement;
			 2:fsm_ns=steady;
			 3:fsm_ns=idle;//stay
			 endcase
			 end
			else
			 fsm_ns=idle;
	end
	increment:
	begin
	 if((!IN_VALID)|(MODE==3))
	  fsm_ns=increment;
	 else if(IN_VALID)
	       begin
			  case(MODE)
			  0:
			  begin //as counter/ns change state
			   if(counter==1 && counter_ns=2 )
				 fsm_ns=done;
			   else
				 fsm_ns=fsm_cs;
			 end
			 default:fsm_ns=idle;
			 endcase
	end
	decrement:
	begin
	 if((!IN_VALID)|(MODE==3))
	  fsm_ns=decrement;
	 else if(IN_VALID)
	       begin
			  case(MODE)
			  1:
			  begin //as counter/ns change state
			   if(counter==1 && counter_ns=2 )
				 fsm_ns=done;
			   else
				 fsm_ns=fsm_cs;
			 end
			 default:fsm_ns=idle;
			 endcase
	end
	steady:
	begin
	 if((!IN_VALID)|(MODE==3))
	  fsm_ns=steady;
	 else if(IN_VALID)
	       begin
			  case(MODE)
			  2:
			  begin //as counter/ns change state
			   if(counter==1 && counter_ns=2 )
				 fsm_ns=done;
			   else
				 fsm_ns=fsm_cs;
			 end
			 default:fsm_ns=fsm_cs;
			 endcase
	end
	done:
	begin//make done state to work after
	 if(!IN_VALID && MODE!=3 &&mode_cs==MODE &&DATA_IN=data_cs+1)
	  fsm_ns=done;
	 else if(!IN_VALID && MODE!=3 &&mode_cs==MODE &&DATA_IN=data_cs-1)
	       fsm_ns=done;
	      else if(!IN_VALID && MODE!=3 &&mode_cs==MODE &&DATA_IN=data_cs)
			      fsm_ns=done;
	           else fsm_ns=idle;	
	end
	
	endcase
end

//output combination
always@(*)
begin
	if(fsm_cs==done && fsm_ns==done)
	begin
	 OUT_VALID=1;
	 DATA_OUT=DATA_IN;
	end
	else
	begin
	 OUT_VALID=0;
	 DATA_OUT=0;
	end
end

endmodule

