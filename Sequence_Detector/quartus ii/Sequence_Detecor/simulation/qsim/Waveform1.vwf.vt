// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/17/2020 17:57:58"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Sequence_Detector
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Sequence_Detector_vlg_sample_tst(
	DATA_IN,
	IN_VALID,
	MODE,
	RST_B,
	SYSCLK,
	sampler_tx
);
input [3:0] DATA_IN;
input  IN_VALID;
input [1:0] MODE;
input  RST_B;
input  SYSCLK;
output sampler_tx;

reg sample;
time current_time;
always @(DATA_IN or IN_VALID or MODE or RST_B or SYSCLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Sequence_Detector_vlg_check_tst (
	DATA_OUT,
	OUT_VALID,
	counter,
	counter_ns,
	data_cs,
	data_pre,
	fsm_cs,
	fsm_ns,
	mode_cs,
	mode_pre,
	sampler_rx
);
input [3:0] DATA_OUT;
input  OUT_VALID;
input [2:0] counter;
input [2:0] counter_ns;
input [3:0] data_cs;
input [3:0] data_pre;
input [2:0] fsm_cs;
input [2:0] fsm_ns;
input [1:0] mode_cs;
input [1:0] mode_pre;
input sampler_rx;

reg [3:0] DATA_OUT_expected;
reg  OUT_VALID_expected;
reg [2:0] counter_expected;
reg [2:0] counter_ns_expected;
reg [3:0] data_cs_expected;
reg [3:0] data_pre_expected;
reg [2:0] fsm_cs_expected;
reg [2:0] fsm_ns_expected;
reg [1:0] mode_cs_expected;
reg [1:0] mode_pre_expected;

reg [3:0] DATA_OUT_prev;
reg  OUT_VALID_prev;
reg [2:0] counter_prev;
reg [2:0] counter_ns_prev;
reg [3:0] data_cs_prev;
reg [3:0] data_pre_prev;
reg [2:0] fsm_cs_prev;
reg [2:0] fsm_ns_prev;
reg [1:0] mode_cs_prev;
reg [1:0] mode_pre_prev;

reg [3:0] DATA_OUT_expected_prev;
reg  OUT_VALID_expected_prev;
reg [2:0] counter_expected_prev;
reg [2:0] counter_ns_expected_prev;
reg [3:0] data_cs_expected_prev;
reg [3:0] data_pre_expected_prev;
reg [2:0] fsm_cs_expected_prev;
reg [2:0] fsm_ns_expected_prev;
reg [1:0] mode_cs_expected_prev;
reg [1:0] mode_pre_expected_prev;

reg [3:0] last_DATA_OUT_exp;
reg  last_OUT_VALID_exp;
reg [2:0] last_counter_exp;
reg [2:0] last_counter_ns_exp;
reg [3:0] last_data_cs_exp;
reg [3:0] last_data_pre_exp;
reg [2:0] last_fsm_cs_exp;
reg [2:0] last_fsm_ns_exp;
reg [1:0] last_mode_cs_exp;
reg [1:0] last_mode_pre_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	DATA_OUT_prev = DATA_OUT;
	OUT_VALID_prev = OUT_VALID;
	counter_prev = counter;
	counter_ns_prev = counter_ns;
	data_cs_prev = data_cs;
	data_pre_prev = data_pre;
	fsm_cs_prev = fsm_cs;
	fsm_ns_prev = fsm_ns;
	mode_cs_prev = mode_cs;
	mode_pre_prev = mode_pre;
end

// update expected /o prevs

always @(trigger)
begin
	DATA_OUT_expected_prev = DATA_OUT_expected;
	OUT_VALID_expected_prev = OUT_VALID_expected;
	counter_expected_prev = counter_expected;
	counter_ns_expected_prev = counter_ns_expected;
	data_cs_expected_prev = data_cs_expected;
	data_pre_expected_prev = data_pre_expected;
	fsm_cs_expected_prev = fsm_cs_expected;
	fsm_ns_expected_prev = fsm_ns_expected;
	mode_cs_expected_prev = mode_cs_expected;
	mode_pre_expected_prev = mode_pre_expected;
end


// expected DATA_OUT[ 3 ]
initial
begin
	DATA_OUT_expected[3] = 1'bX;
end 
// expected DATA_OUT[ 2 ]
initial
begin
	DATA_OUT_expected[2] = 1'bX;
end 
// expected DATA_OUT[ 1 ]
initial
begin
	DATA_OUT_expected[1] = 1'bX;
end 
// expected DATA_OUT[ 0 ]
initial
begin
	DATA_OUT_expected[0] = 1'bX;
end 

// expected OUT_VALID
initial
begin
	OUT_VALID_expected = 1'bX;
end 
// expected counter[ 2 ]
initial
begin
	counter_expected[2] = 1'bX;
end 
// expected counter[ 1 ]
initial
begin
	counter_expected[1] = 1'bX;
end 
// expected counter[ 0 ]
initial
begin
	counter_expected[0] = 1'bX;
end 
// expected counter_ns[ 2 ]
initial
begin
	counter_ns_expected[2] = 1'bX;
end 
// expected counter_ns[ 1 ]
initial
begin
	counter_ns_expected[1] = 1'bX;
end 
// expected counter_ns[ 0 ]
initial
begin
	counter_ns_expected[0] = 1'bX;
end 
// expected data_cs[ 3 ]
initial
begin
	data_cs_expected[3] = 1'bX;
end 
// expected data_cs[ 2 ]
initial
begin
	data_cs_expected[2] = 1'bX;
end 
// expected data_cs[ 1 ]
initial
begin
	data_cs_expected[1] = 1'bX;
end 
// expected data_cs[ 0 ]
initial
begin
	data_cs_expected[0] = 1'bX;
end 
// expected data_pre[ 3 ]
initial
begin
	data_pre_expected[3] = 1'bX;
end 
// expected data_pre[ 2 ]
initial
begin
	data_pre_expected[2] = 1'bX;
end 
// expected data_pre[ 1 ]
initial
begin
	data_pre_expected[1] = 1'bX;
end 
// expected data_pre[ 0 ]
initial
begin
	data_pre_expected[0] = 1'bX;
end 
// expected fsm_cs[ 2 ]
initial
begin
	fsm_cs_expected[2] = 1'bX;
end 
// expected fsm_cs[ 1 ]
initial
begin
	fsm_cs_expected[1] = 1'bX;
end 
// expected fsm_cs[ 0 ]
initial
begin
	fsm_cs_expected[0] = 1'bX;
end 
// expected fsm_ns[ 2 ]
initial
begin
	fsm_ns_expected[2] = 1'bX;
end 
// expected fsm_ns[ 1 ]
initial
begin
	fsm_ns_expected[1] = 1'bX;
end 
// expected fsm_ns[ 0 ]
initial
begin
	fsm_ns_expected[0] = 1'bX;
end 
// expected mode_cs[ 1 ]
initial
begin
	mode_cs_expected[1] = 1'bX;
end 
// expected mode_cs[ 0 ]
initial
begin
	mode_cs_expected[0] = 1'bX;
end 
// expected mode_pre[ 1 ]
initial
begin
	mode_pre_expected[1] = 1'bX;
end 
// expected mode_pre[ 0 ]
initial
begin
	mode_pre_expected[0] = 1'bX;
end 
// generate trigger
always @(DATA_OUT_expected or DATA_OUT or OUT_VALID_expected or OUT_VALID or counter_expected or counter or counter_ns_expected or counter_ns or data_cs_expected or data_cs or data_pre_expected or data_pre or fsm_cs_expected or fsm_cs or fsm_ns_expected or fsm_ns or mode_cs_expected or mode_cs or mode_pre_expected or mode_pre)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DATA_OUT = %b | expected OUT_VALID = %b | expected counter = %b | expected counter_ns = %b | expected data_cs = %b | expected data_pre = %b | expected fsm_cs = %b | expected fsm_ns = %b | expected mode_cs = %b | expected mode_pre = %b | ",DATA_OUT_expected_prev,OUT_VALID_expected_prev,counter_expected_prev,counter_ns_expected_prev,data_cs_expected_prev,data_pre_expected_prev,fsm_cs_expected_prev,fsm_ns_expected_prev,mode_cs_expected_prev,mode_pre_expected_prev);
	$display("| real DATA_OUT = %b | real OUT_VALID = %b | real counter = %b | real counter_ns = %b | real data_cs = %b | real data_pre = %b | real fsm_cs = %b | real fsm_ns = %b | real mode_cs = %b | real mode_pre = %b | ",DATA_OUT_prev,OUT_VALID_prev,counter_prev,counter_ns_prev,data_cs_prev,data_pre_prev,fsm_cs_prev,fsm_ns_prev,mode_cs_prev,mode_pre_prev);
`endif
	if (
		( DATA_OUT_expected_prev[0] !== 1'bx ) && ( DATA_OUT_prev[0] !== DATA_OUT_expected_prev[0] )
		&& ((DATA_OUT_expected_prev[0] !== last_DATA_OUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[0] = DATA_OUT_expected_prev[0];
	end
	if (
		( DATA_OUT_expected_prev[1] !== 1'bx ) && ( DATA_OUT_prev[1] !== DATA_OUT_expected_prev[1] )
		&& ((DATA_OUT_expected_prev[1] !== last_DATA_OUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[1] = DATA_OUT_expected_prev[1];
	end
	if (
		( DATA_OUT_expected_prev[2] !== 1'bx ) && ( DATA_OUT_prev[2] !== DATA_OUT_expected_prev[2] )
		&& ((DATA_OUT_expected_prev[2] !== last_DATA_OUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[2] = DATA_OUT_expected_prev[2];
	end
	if (
		( DATA_OUT_expected_prev[3] !== 1'bx ) && ( DATA_OUT_prev[3] !== DATA_OUT_expected_prev[3] )
		&& ((DATA_OUT_expected_prev[3] !== last_DATA_OUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[3] = DATA_OUT_expected_prev[3];
	end
	if (
		( OUT_VALID_expected_prev !== 1'bx ) && ( OUT_VALID_prev !== OUT_VALID_expected_prev )
		&& ((OUT_VALID_expected_prev !== last_OUT_VALID_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_VALID :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_VALID_expected_prev);
		$display ("     Real value = %b", OUT_VALID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_VALID_exp = OUT_VALID_expected_prev;
	end
	if (
		( counter_expected_prev[0] !== 1'bx ) && ( counter_prev[0] !== counter_expected_prev[0] )
		&& ((counter_expected_prev[0] !== last_counter_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_exp[0] = counter_expected_prev[0];
	end
	if (
		( counter_expected_prev[1] !== 1'bx ) && ( counter_prev[1] !== counter_expected_prev[1] )
		&& ((counter_expected_prev[1] !== last_counter_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_exp[1] = counter_expected_prev[1];
	end
	if (
		( counter_expected_prev[2] !== 1'bx ) && ( counter_prev[2] !== counter_expected_prev[2] )
		&& ((counter_expected_prev[2] !== last_counter_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_counter_exp[2] = counter_expected_prev[2];
	end
	if (
		( counter_ns_expected_prev[0] !== 1'bx ) && ( counter_ns_prev[0] !== counter_ns_expected_prev[0] )
		&& ((counter_ns_expected_prev[0] !== last_counter_ns_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter_ns[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_ns_expected_prev);
		$display ("     Real value = %b", counter_ns_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_counter_ns_exp[0] = counter_ns_expected_prev[0];
	end
	if (
		( counter_ns_expected_prev[1] !== 1'bx ) && ( counter_ns_prev[1] !== counter_ns_expected_prev[1] )
		&& ((counter_ns_expected_prev[1] !== last_counter_ns_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter_ns[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_ns_expected_prev);
		$display ("     Real value = %b", counter_ns_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_counter_ns_exp[1] = counter_ns_expected_prev[1];
	end
	if (
		( counter_ns_expected_prev[2] !== 1'bx ) && ( counter_ns_prev[2] !== counter_ns_expected_prev[2] )
		&& ((counter_ns_expected_prev[2] !== last_counter_ns_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter_ns[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_ns_expected_prev);
		$display ("     Real value = %b", counter_ns_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_counter_ns_exp[2] = counter_ns_expected_prev[2];
	end
	if (
		( data_cs_expected_prev[0] !== 1'bx ) && ( data_cs_prev[0] !== data_cs_expected_prev[0] )
		&& ((data_cs_expected_prev[0] !== last_data_cs_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_cs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_cs_expected_prev);
		$display ("     Real value = %b", data_cs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_cs_exp[0] = data_cs_expected_prev[0];
	end
	if (
		( data_cs_expected_prev[1] !== 1'bx ) && ( data_cs_prev[1] !== data_cs_expected_prev[1] )
		&& ((data_cs_expected_prev[1] !== last_data_cs_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_cs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_cs_expected_prev);
		$display ("     Real value = %b", data_cs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_cs_exp[1] = data_cs_expected_prev[1];
	end
	if (
		( data_cs_expected_prev[2] !== 1'bx ) && ( data_cs_prev[2] !== data_cs_expected_prev[2] )
		&& ((data_cs_expected_prev[2] !== last_data_cs_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_cs[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_cs_expected_prev);
		$display ("     Real value = %b", data_cs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_cs_exp[2] = data_cs_expected_prev[2];
	end
	if (
		( data_cs_expected_prev[3] !== 1'bx ) && ( data_cs_prev[3] !== data_cs_expected_prev[3] )
		&& ((data_cs_expected_prev[3] !== last_data_cs_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_cs[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_cs_expected_prev);
		$display ("     Real value = %b", data_cs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_cs_exp[3] = data_cs_expected_prev[3];
	end
	if (
		( data_pre_expected_prev[0] !== 1'bx ) && ( data_pre_prev[0] !== data_pre_expected_prev[0] )
		&& ((data_pre_expected_prev[0] !== last_data_pre_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_pre[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_pre_expected_prev);
		$display ("     Real value = %b", data_pre_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_pre_exp[0] = data_pre_expected_prev[0];
	end
	if (
		( data_pre_expected_prev[1] !== 1'bx ) && ( data_pre_prev[1] !== data_pre_expected_prev[1] )
		&& ((data_pre_expected_prev[1] !== last_data_pre_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_pre[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_pre_expected_prev);
		$display ("     Real value = %b", data_pre_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_pre_exp[1] = data_pre_expected_prev[1];
	end
	if (
		( data_pre_expected_prev[2] !== 1'bx ) && ( data_pre_prev[2] !== data_pre_expected_prev[2] )
		&& ((data_pre_expected_prev[2] !== last_data_pre_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_pre[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_pre_expected_prev);
		$display ("     Real value = %b", data_pre_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_pre_exp[2] = data_pre_expected_prev[2];
	end
	if (
		( data_pre_expected_prev[3] !== 1'bx ) && ( data_pre_prev[3] !== data_pre_expected_prev[3] )
		&& ((data_pre_expected_prev[3] !== last_data_pre_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_pre[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_pre_expected_prev);
		$display ("     Real value = %b", data_pre_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_pre_exp[3] = data_pre_expected_prev[3];
	end
	if (
		( fsm_cs_expected_prev[0] !== 1'bx ) && ( fsm_cs_prev[0] !== fsm_cs_expected_prev[0] )
		&& ((fsm_cs_expected_prev[0] !== last_fsm_cs_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fsm_cs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fsm_cs_expected_prev);
		$display ("     Real value = %b", fsm_cs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_fsm_cs_exp[0] = fsm_cs_expected_prev[0];
	end
	if (
		( fsm_cs_expected_prev[1] !== 1'bx ) && ( fsm_cs_prev[1] !== fsm_cs_expected_prev[1] )
		&& ((fsm_cs_expected_prev[1] !== last_fsm_cs_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fsm_cs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fsm_cs_expected_prev);
		$display ("     Real value = %b", fsm_cs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_fsm_cs_exp[1] = fsm_cs_expected_prev[1];
	end
	if (
		( fsm_cs_expected_prev[2] !== 1'bx ) && ( fsm_cs_prev[2] !== fsm_cs_expected_prev[2] )
		&& ((fsm_cs_expected_prev[2] !== last_fsm_cs_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fsm_cs[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fsm_cs_expected_prev);
		$display ("     Real value = %b", fsm_cs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_fsm_cs_exp[2] = fsm_cs_expected_prev[2];
	end
	if (
		( fsm_ns_expected_prev[0] !== 1'bx ) && ( fsm_ns_prev[0] !== fsm_ns_expected_prev[0] )
		&& ((fsm_ns_expected_prev[0] !== last_fsm_ns_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fsm_ns[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fsm_ns_expected_prev);
		$display ("     Real value = %b", fsm_ns_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_fsm_ns_exp[0] = fsm_ns_expected_prev[0];
	end
	if (
		( fsm_ns_expected_prev[1] !== 1'bx ) && ( fsm_ns_prev[1] !== fsm_ns_expected_prev[1] )
		&& ((fsm_ns_expected_prev[1] !== last_fsm_ns_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fsm_ns[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fsm_ns_expected_prev);
		$display ("     Real value = %b", fsm_ns_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_fsm_ns_exp[1] = fsm_ns_expected_prev[1];
	end
	if (
		( fsm_ns_expected_prev[2] !== 1'bx ) && ( fsm_ns_prev[2] !== fsm_ns_expected_prev[2] )
		&& ((fsm_ns_expected_prev[2] !== last_fsm_ns_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fsm_ns[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fsm_ns_expected_prev);
		$display ("     Real value = %b", fsm_ns_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_fsm_ns_exp[2] = fsm_ns_expected_prev[2];
	end
	if (
		( mode_cs_expected_prev[0] !== 1'bx ) && ( mode_cs_prev[0] !== mode_cs_expected_prev[0] )
		&& ((mode_cs_expected_prev[0] !== last_mode_cs_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mode_cs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mode_cs_expected_prev);
		$display ("     Real value = %b", mode_cs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mode_cs_exp[0] = mode_cs_expected_prev[0];
	end
	if (
		( mode_cs_expected_prev[1] !== 1'bx ) && ( mode_cs_prev[1] !== mode_cs_expected_prev[1] )
		&& ((mode_cs_expected_prev[1] !== last_mode_cs_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mode_cs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mode_cs_expected_prev);
		$display ("     Real value = %b", mode_cs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_mode_cs_exp[1] = mode_cs_expected_prev[1];
	end
	if (
		( mode_pre_expected_prev[0] !== 1'bx ) && ( mode_pre_prev[0] !== mode_pre_expected_prev[0] )
		&& ((mode_pre_expected_prev[0] !== last_mode_pre_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mode_pre[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mode_pre_expected_prev);
		$display ("     Real value = %b", mode_pre_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_mode_pre_exp[0] = mode_pre_expected_prev[0];
	end
	if (
		( mode_pre_expected_prev[1] !== 1'bx ) && ( mode_pre_prev[1] !== mode_pre_expected_prev[1] )
		&& ((mode_pre_expected_prev[1] !== last_mode_pre_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mode_pre[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mode_pre_expected_prev);
		$display ("     Real value = %b", mode_pre_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_mode_pre_exp[1] = mode_pre_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Sequence_Detector_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] DATA_IN;
reg IN_VALID;
reg [1:0] MODE;
reg RST_B;
reg SYSCLK;
// wires                                               
wire [3:0] DATA_OUT;
wire OUT_VALID;
wire [2:0] counter;
wire [2:0] counter_ns;
wire [3:0] data_cs;
wire [3:0] data_pre;
wire [2:0] fsm_cs;
wire [2:0] fsm_ns;
wire [1:0] mode_cs;
wire [1:0] mode_pre;

wire sampler;                             

// assign statements (if any)                          
Sequence_Detector i1 (
// port map - connection between master ports and signals/registers   
	.DATA_IN(DATA_IN),
	.DATA_OUT(DATA_OUT),
	.IN_VALID(IN_VALID),
	.MODE(MODE),
	.OUT_VALID(OUT_VALID),
	.RST_B(RST_B),
	.SYSCLK(SYSCLK),
	.counter(counter),
	.counter_ns(counter_ns),
	.data_cs(data_cs),
	.data_pre(data_pre),
	.fsm_cs(fsm_cs),
	.fsm_ns(fsm_ns),
	.mode_cs(mode_cs),
	.mode_pre(mode_pre)
);

// SYSCLK
initial
begin
	SYSCLK = 1'b1;
	SYSCLK = #5000 1'b0;
	# 5000;
	repeat(98)
	begin
		SYSCLK = 1'b1;
		SYSCLK = #5000 1'b0;
		# 5000;
	end
	SYSCLK = 1'b1;
	SYSCLK = #5000 1'b0;
end 

// RST_B
initial
begin
	RST_B = 1'b1;
	RST_B = #9536 1'b0;
	RST_B = #5513 1'b1;
end 

// IN_VALID
initial
begin
	IN_VALID = 1'b0;
	IN_VALID = #60000 1'b1;
	IN_VALID = #50000 1'b0;
	IN_VALID = #10000 1'b1;
	IN_VALID = #50000 1'b0;
	IN_VALID = #10000 1'b1;
	IN_VALID = #50000 1'b0;
	IN_VALID = #10000 1'b1;
	IN_VALID = #150000 1'b0;
	IN_VALID = #10000 1'b1;
	IN_VALID = #10000 1'b0;
	IN_VALID = #10000 1'b1;
	IN_VALID = #10000 1'b0;
	IN_VALID = #20000 1'b1;
	IN_VALID = #10000 1'b0;
	IN_VALID = #20000 1'b1;
	IN_VALID = #10000 1'b0;
end 
// MODE[ 1 ]
initial
begin
	MODE[1] = 1'b0;
	MODE[1] = #180000 1'b1;
	MODE[1] = #60000 1'b0;
	MODE[1] = #110000 1'b1;
	MODE[1] = #40000 1'b0;
	MODE[1] = #70000 1'b1;
	MODE[1] = #10000 1'b0;
end 
// MODE[ 0 ]
initial
begin
	MODE[0] = 1'b0;
	MODE[0] = #120000 1'b1;
	MODE[0] = #60000 1'b0;
	MODE[0] = #90000 1'b1;
	MODE[0] = #40000 1'b0;
	MODE[0] = #160000 1'b1;
	MODE[0] = #10000 1'b0;
end 
// DATA_IN[ 3 ]
initial
begin
	DATA_IN[3] = 1'b0;
	DATA_IN[3] = #80196 1'b1;
	DATA_IN[3] = #19634 1'b0;
	DATA_IN[3] = #80758 1'b1;
	DATA_IN[3] = #39412 1'b0;
	DATA_IN[3] = #120000 1'b1;
	DATA_IN[3] = #50000 1'b0;
end 
// DATA_IN[ 2 ]
initial
begin
	DATA_IN[2] = 1'b0;
	DATA_IN[2] = #30281 1'b1;
	DATA_IN[2] = #18889 1'b0;
	DATA_IN[2] = #11026 1'b1;
	DATA_IN[2] = #20000 1'b0;
	DATA_IN[2] = #40345 1'b1;
	DATA_IN[2] = #30000 1'b0;
	DATA_IN[2] = #89459 1'b1;
	DATA_IN[2] = #100000 1'b0;
end 
// DATA_IN[ 1 ]
initial
begin
	DATA_IN[1] = 1'b0;
	DATA_IN[1] = #10281 1'b1;
	DATA_IN[1] = #20000 1'b0;
	DATA_IN[1] = #29915 1'b1;
	DATA_IN[1] = #20000 1'b0;
	DATA_IN[1] = #40345 1'b1;
	DATA_IN[1] = #10000 1'b0;
	DATA_IN[1] = #20000 1'b1;
	DATA_IN[1] = #9187 1'b0;
	DATA_IN[1] = #20860 1'b1;
	DATA_IN[1] = #39412 1'b0;
	DATA_IN[1] = #40000 1'b1;
	DATA_IN[1] = #30000 1'b0;
	DATA_IN[1] = #30000 1'b1;
	DATA_IN[1] = #20000 1'b0;
	DATA_IN[1] = #90000 1'b1;
	DATA_IN[1] = #60000 1'b0;
end 
// DATA_IN[ 0 ]
initial
begin
	DATA_IN[0] = 1'b0;
	DATA_IN[0] = #20281 1'b1;
	DATA_IN[0] = #10000 1'b0;
	DATA_IN[0] = #10000 1'b1;
	DATA_IN[0] = #8889 1'b0;
	DATA_IN[0] = #21026 1'b1;
	DATA_IN[0] = #10000 1'b0;
	DATA_IN[0] = #10000 1'b1;
	DATA_IN[0] = #9634 1'b0;
	DATA_IN[0] = #30711 1'b1;
	DATA_IN[0] = #10000 1'b0;
	DATA_IN[0] = #10000 1'b1;
	DATA_IN[0] = #9187 1'b0;
	DATA_IN[0] = #20860 1'b1;
	DATA_IN[0] = #39412 1'b0;
	DATA_IN[0] = #30000 1'b1;
	DATA_IN[0] = #10000 1'b0;
	DATA_IN[0] = #10000 1'b1;
	DATA_IN[0] = #10000 1'b0;
	DATA_IN[0] = #10000 1'b1;
	DATA_IN[0] = #10000 1'b0;
	DATA_IN[0] = #10000 1'b1;
	DATA_IN[0] = #10000 1'b0;
	DATA_IN[0] = #10000 1'b1;
	DATA_IN[0] = #10000 1'b0;
	DATA_IN[0] = #70000 1'b1;
	DATA_IN[0] = #20000 1'b0;
	DATA_IN[0] = #10000 1'b1;
	DATA_IN[0] = #10000 1'b0;
	DATA_IN[0] = #20000 1'b1;
	DATA_IN[0] = #20000 1'b0;
end 

Sequence_Detector_vlg_sample_tst tb_sample (
	.DATA_IN(DATA_IN),
	.IN_VALID(IN_VALID),
	.MODE(MODE),
	.RST_B(RST_B),
	.SYSCLK(SYSCLK),
	.sampler_tx(sampler)
);

Sequence_Detector_vlg_check_tst tb_out(
	.DATA_OUT(DATA_OUT),
	.OUT_VALID(OUT_VALID),
	.counter(counter),
	.counter_ns(counter_ns),
	.data_cs(data_cs),
	.data_pre(data_pre),
	.fsm_cs(fsm_cs),
	.fsm_ns(fsm_ns),
	.mode_cs(mode_cs),
	.mode_pre(mode_pre),
	.sampler_rx(sampler)
);
endmodule

