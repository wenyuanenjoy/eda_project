// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/18/2020 16:30:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FIFO
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FIFO_vlg_sample_tst(
	FIFO_IN,
	RD_EN,
	RST_B,
	SYSCLK,
	WR_EN,
	sampler_tx
);
input [7:0] FIFO_IN;
input  RD_EN;
input  RST_B;
input  SYSCLK;
input  WR_EN;
output sampler_tx;

reg sample;
time current_time;
always @(FIFO_IN or RD_EN or RST_B or SYSCLK or WR_EN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FIFO_vlg_check_tst (
	EMPTY,
	FIFO_OUT,
	FULL,
	sampler_rx
);
input  EMPTY;
input [7:0] FIFO_OUT;
input  FULL;
input sampler_rx;

reg  EMPTY_expected;
reg [7:0] FIFO_OUT_expected;
reg  FULL_expected;

reg  EMPTY_prev;
reg [7:0] FIFO_OUT_prev;
reg  FULL_prev;

reg  EMPTY_expected_prev;
reg [7:0] FIFO_OUT_expected_prev;
reg  FULL_expected_prev;

reg  last_EMPTY_exp;
reg [7:0] last_FIFO_OUT_exp;
reg  last_FULL_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	EMPTY_prev = EMPTY;
	FIFO_OUT_prev = FIFO_OUT;
	FULL_prev = FULL;
end

// update expected /o prevs

always @(trigger)
begin
	EMPTY_expected_prev = EMPTY_expected;
	FIFO_OUT_expected_prev = FIFO_OUT_expected;
	FULL_expected_prev = FULL_expected;
end


// expected FIFO_OUT[ 7 ]
initial
begin
	FIFO_OUT_expected[7] = 1'bX;
end 
// expected FIFO_OUT[ 6 ]
initial
begin
	FIFO_OUT_expected[6] = 1'bX;
end 
// expected FIFO_OUT[ 5 ]
initial
begin
	FIFO_OUT_expected[5] = 1'bX;
end 
// expected FIFO_OUT[ 4 ]
initial
begin
	FIFO_OUT_expected[4] = 1'bX;
end 
// expected FIFO_OUT[ 3 ]
initial
begin
	FIFO_OUT_expected[3] = 1'bX;
end 
// expected FIFO_OUT[ 2 ]
initial
begin
	FIFO_OUT_expected[2] = 1'bX;
end 
// expected FIFO_OUT[ 1 ]
initial
begin
	FIFO_OUT_expected[1] = 1'bX;
end 
// expected FIFO_OUT[ 0 ]
initial
begin
	FIFO_OUT_expected[0] = 1'bX;
end 

// expected EMPTY
initial
begin
	EMPTY_expected = 1'bX;
end 

// expected FULL
initial
begin
	FULL_expected = 1'bX;
end 
// generate trigger
always @(EMPTY_expected or EMPTY or FIFO_OUT_expected or FIFO_OUT or FULL_expected or FULL)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected EMPTY = %b | expected FIFO_OUT = %b | expected FULL = %b | ",EMPTY_expected_prev,FIFO_OUT_expected_prev,FULL_expected_prev);
	$display("| real EMPTY = %b | real FIFO_OUT = %b | real FULL = %b | ",EMPTY_prev,FIFO_OUT_prev,FULL_prev);
`endif
	if (
		( EMPTY_expected_prev !== 1'bx ) && ( EMPTY_prev !== EMPTY_expected_prev )
		&& ((EMPTY_expected_prev !== last_EMPTY_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EMPTY :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EMPTY_expected_prev);
		$display ("     Real value = %b", EMPTY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_EMPTY_exp = EMPTY_expected_prev;
	end
	if (
		( FIFO_OUT_expected_prev[0] !== 1'bx ) && ( FIFO_OUT_prev[0] !== FIFO_OUT_expected_prev[0] )
		&& ((FIFO_OUT_expected_prev[0] !== last_FIFO_OUT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FIFO_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FIFO_OUT_expected_prev);
		$display ("     Real value = %b", FIFO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_FIFO_OUT_exp[0] = FIFO_OUT_expected_prev[0];
	end
	if (
		( FIFO_OUT_expected_prev[1] !== 1'bx ) && ( FIFO_OUT_prev[1] !== FIFO_OUT_expected_prev[1] )
		&& ((FIFO_OUT_expected_prev[1] !== last_FIFO_OUT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FIFO_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FIFO_OUT_expected_prev);
		$display ("     Real value = %b", FIFO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_FIFO_OUT_exp[1] = FIFO_OUT_expected_prev[1];
	end
	if (
		( FIFO_OUT_expected_prev[2] !== 1'bx ) && ( FIFO_OUT_prev[2] !== FIFO_OUT_expected_prev[2] )
		&& ((FIFO_OUT_expected_prev[2] !== last_FIFO_OUT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FIFO_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FIFO_OUT_expected_prev);
		$display ("     Real value = %b", FIFO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_FIFO_OUT_exp[2] = FIFO_OUT_expected_prev[2];
	end
	if (
		( FIFO_OUT_expected_prev[3] !== 1'bx ) && ( FIFO_OUT_prev[3] !== FIFO_OUT_expected_prev[3] )
		&& ((FIFO_OUT_expected_prev[3] !== last_FIFO_OUT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FIFO_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FIFO_OUT_expected_prev);
		$display ("     Real value = %b", FIFO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_FIFO_OUT_exp[3] = FIFO_OUT_expected_prev[3];
	end
	if (
		( FIFO_OUT_expected_prev[4] !== 1'bx ) && ( FIFO_OUT_prev[4] !== FIFO_OUT_expected_prev[4] )
		&& ((FIFO_OUT_expected_prev[4] !== last_FIFO_OUT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FIFO_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FIFO_OUT_expected_prev);
		$display ("     Real value = %b", FIFO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_FIFO_OUT_exp[4] = FIFO_OUT_expected_prev[4];
	end
	if (
		( FIFO_OUT_expected_prev[5] !== 1'bx ) && ( FIFO_OUT_prev[5] !== FIFO_OUT_expected_prev[5] )
		&& ((FIFO_OUT_expected_prev[5] !== last_FIFO_OUT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FIFO_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FIFO_OUT_expected_prev);
		$display ("     Real value = %b", FIFO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_FIFO_OUT_exp[5] = FIFO_OUT_expected_prev[5];
	end
	if (
		( FIFO_OUT_expected_prev[6] !== 1'bx ) && ( FIFO_OUT_prev[6] !== FIFO_OUT_expected_prev[6] )
		&& ((FIFO_OUT_expected_prev[6] !== last_FIFO_OUT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FIFO_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FIFO_OUT_expected_prev);
		$display ("     Real value = %b", FIFO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_FIFO_OUT_exp[6] = FIFO_OUT_expected_prev[6];
	end
	if (
		( FIFO_OUT_expected_prev[7] !== 1'bx ) && ( FIFO_OUT_prev[7] !== FIFO_OUT_expected_prev[7] )
		&& ((FIFO_OUT_expected_prev[7] !== last_FIFO_OUT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FIFO_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FIFO_OUT_expected_prev);
		$display ("     Real value = %b", FIFO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_FIFO_OUT_exp[7] = FIFO_OUT_expected_prev[7];
	end
	if (
		( FULL_expected_prev !== 1'bx ) && ( FULL_prev !== FULL_expected_prev )
		&& ((FULL_expected_prev !== last_FULL_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FULL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FULL_expected_prev);
		$display ("     Real value = %b", FULL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_FULL_exp = FULL_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FIFO_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] FIFO_IN;
reg RD_EN;
reg RST_B;
reg SYSCLK;
reg WR_EN;
// wires                                               
wire EMPTY;
wire [7:0] FIFO_OUT;
wire FULL;

wire sampler;                             

// assign statements (if any)                          
FIFO i1 (
// port map - connection between master ports and signals/registers   
	.EMPTY(EMPTY),
	.FIFO_IN(FIFO_IN),
	.FIFO_OUT(FIFO_OUT),
	.FULL(FULL),
	.RD_EN(RD_EN),
	.RST_B(RST_B),
	.SYSCLK(SYSCLK),
	.WR_EN(WR_EN)
);

// SYSCLK
initial
begin
	SYSCLK = 1'b1;
	SYSCLK = #5000 1'b0;
	# 5000;
	repeat(98)
	begin
		SYSCLK = 1'b1;
		SYSCLK = #5000 1'b0;
		# 5000;
	end
	SYSCLK = 1'b1;
	SYSCLK = #5000 1'b0;
end 

// RST_B
initial
begin
	RST_B = 1'b1;
	RST_B = #10000 1'b0;
	RST_B = #10000 1'b1;
end 

// WR_EN
initial
begin
	WR_EN = 1'b0;
	WR_EN = #40000 1'b1;
	WR_EN = #10000 1'b0;
	WR_EN = #10000 1'b1;
	WR_EN = #10000 1'b0;
	WR_EN = #10000 1'b1;
	WR_EN = #10000 1'b0;
	WR_EN = #10000 1'b1;
	WR_EN = #10000 1'b0;
	WR_EN = #100000 1'b1;
	WR_EN = #10000 1'b0;
end 

// RD_EN
initial
begin
	RD_EN = 1'b0;
	RD_EN = #120000 1'b1;
	RD_EN = #10000 1'b0;
	RD_EN = #10000 1'b1;
	RD_EN = #10000 1'b0;
	RD_EN = #10000 1'b1;
	RD_EN = #10000 1'b0;
	RD_EN = #10000 1'b1;
	RD_EN = #10000 1'b0;
	RD_EN = #150000 1'b1;
	RD_EN = #10000 1'b0;
end 
// FIFO_IN[ 7 ]
initial
begin
	FIFO_IN[7] = 1'b0;
end 
// FIFO_IN[ 6 ]
initial
begin
	FIFO_IN[6] = 1'b0;
end 
// FIFO_IN[ 5 ]
initial
begin
	FIFO_IN[5] = 1'b0;
end 
// FIFO_IN[ 4 ]
initial
begin
	FIFO_IN[4] = 1'b0;
end 
// FIFO_IN[ 3 ]
initial
begin
	FIFO_IN[3] = 1'b0;
end 
// FIFO_IN[ 2 ]
initial
begin
	FIFO_IN[2] = 1'b0;
	FIFO_IN[2] = #100000 1'b1;
	FIFO_IN[2] = #20000 1'b0;
	FIFO_IN[2] = #90000 1'b1;
	FIFO_IN[2] = #20000 1'b0;
end 
// FIFO_IN[ 1 ]
initial
begin
	FIFO_IN[1] = 1'b0;
	FIFO_IN[1] = #60000 1'b1;
	FIFO_IN[1] = #40000 1'b0;
	FIFO_IN[1] = #110000 1'b1;
	FIFO_IN[1] = #20000 1'b0;
end 
// FIFO_IN[ 0 ]
initial
begin
	FIFO_IN[0] = 1'b0;
	FIFO_IN[0] = #40000 1'b1;
	FIFO_IN[0] = #20000 1'b0;
	FIFO_IN[0] = #20000 1'b1;
	FIFO_IN[0] = #20000 1'b0;
	FIFO_IN[0] = #110000 1'b1;
	FIFO_IN[0] = #20000 1'b0;
end 

FIFO_vlg_sample_tst tb_sample (
	.FIFO_IN(FIFO_IN),
	.RD_EN(RD_EN),
	.RST_B(RST_B),
	.SYSCLK(SYSCLK),
	.WR_EN(WR_EN),
	.sampler_tx(sampler)
);

FIFO_vlg_check_tst tb_out(
	.EMPTY(EMPTY),
	.FIFO_OUT(FIFO_OUT),
	.FULL(FULL),
	.sampler_rx(sampler)
);
endmodule

