// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/19/2020 17:41:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    APB_Slave
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module APB_Slave_vlg_sample_tst(
	PADDR,
	PENABLE,
	PSEL,
	PWDATA,
	PWRITE,
	RST_B,
	SYSCLK,
	sampler_tx
);
input [4:0] PADDR;
input  PENABLE;
input  PSEL;
input [31:0] PWDATA;
input  PWRITE;
input  RST_B;
input  SYSCLK;
output sampler_tx;

reg sample;
time current_time;
always @(PADDR or PENABLE or PSEL or PWDATA or PWRITE or RST_B or SYSCLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module APB_Slave_vlg_check_tst (
	CNT_START,
	COUNT,
	COUNT_NS,
	EX_CON,
	EX_CON_NS,
	EX_TO,
	EX_TO_NS,
	INT_B,
	PRDATA,
	fsm_cs,
	fsm_ns,
	sampler_rx
);
input  CNT_START;
input [31:0] COUNT;
input [31:0] COUNT_NS;
input [31:0] EX_CON;
input [31:0] EX_CON_NS;
input [31:0] EX_TO;
input [31:0] EX_TO_NS;
input  INT_B;
input [31:0] PRDATA;
input [2:0] fsm_cs;
input [2:0] fsm_ns;
input sampler_rx;

reg  CNT_START_expected;
reg [31:0] COUNT_expected;
reg [31:0] COUNT_NS_expected;
reg [31:0] EX_CON_expected;
reg [31:0] EX_CON_NS_expected;
reg [31:0] EX_TO_expected;
reg [31:0] EX_TO_NS_expected;
reg  INT_B_expected;
reg [31:0] PRDATA_expected;
reg [2:0] fsm_cs_expected;
reg [2:0] fsm_ns_expected;

reg  CNT_START_prev;
reg [31:0] COUNT_prev;
reg [31:0] COUNT_NS_prev;
reg [31:0] EX_CON_prev;
reg [31:0] EX_CON_NS_prev;
reg [31:0] EX_TO_prev;
reg [31:0] EX_TO_NS_prev;
reg  INT_B_prev;
reg [31:0] PRDATA_prev;
reg [2:0] fsm_cs_prev;
reg [2:0] fsm_ns_prev;

reg  CNT_START_expected_prev;
reg [31:0] COUNT_expected_prev;
reg [31:0] COUNT_NS_expected_prev;
reg [31:0] EX_CON_expected_prev;
reg [31:0] EX_CON_NS_expected_prev;
reg [31:0] EX_TO_expected_prev;
reg [31:0] EX_TO_NS_expected_prev;
reg  INT_B_expected_prev;
reg [31:0] PRDATA_expected_prev;
reg [2:0] fsm_cs_expected_prev;
reg [2:0] fsm_ns_expected_prev;

reg  last_CNT_START_exp;
reg [31:0] last_COUNT_exp;
reg [31:0] last_COUNT_NS_exp;
reg [31:0] last_EX_CON_exp;
reg [31:0] last_EX_CON_NS_exp;
reg [31:0] last_EX_TO_exp;
reg [31:0] last_EX_TO_NS_exp;
reg  last_INT_B_exp;
reg [31:0] last_PRDATA_exp;
reg [2:0] last_fsm_cs_exp;
reg [2:0] last_fsm_ns_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	CNT_START_prev = CNT_START;
	COUNT_prev = COUNT;
	COUNT_NS_prev = COUNT_NS;
	EX_CON_prev = EX_CON;
	EX_CON_NS_prev = EX_CON_NS;
	EX_TO_prev = EX_TO;
	EX_TO_NS_prev = EX_TO_NS;
	INT_B_prev = INT_B;
	PRDATA_prev = PRDATA;
	fsm_cs_prev = fsm_cs;
	fsm_ns_prev = fsm_ns;
end

// update expected /o prevs

always @(trigger)
begin
	CNT_START_expected_prev = CNT_START_expected;
	COUNT_expected_prev = COUNT_expected;
	COUNT_NS_expected_prev = COUNT_NS_expected;
	EX_CON_expected_prev = EX_CON_expected;
	EX_CON_NS_expected_prev = EX_CON_NS_expected;
	EX_TO_expected_prev = EX_TO_expected;
	EX_TO_NS_expected_prev = EX_TO_NS_expected;
	INT_B_expected_prev = INT_B_expected;
	PRDATA_expected_prev = PRDATA_expected;
	fsm_cs_expected_prev = fsm_cs_expected;
	fsm_ns_expected_prev = fsm_ns_expected;
end


// expected EX_CON[ 31 ]
initial
begin
	EX_CON_expected[31] = 1'bX;
end 
// expected EX_CON[ 30 ]
initial
begin
	EX_CON_expected[30] = 1'bX;
end 
// expected EX_CON[ 29 ]
initial
begin
	EX_CON_expected[29] = 1'bX;
end 
// expected EX_CON[ 28 ]
initial
begin
	EX_CON_expected[28] = 1'bX;
end 
// expected EX_CON[ 27 ]
initial
begin
	EX_CON_expected[27] = 1'bX;
end 
// expected EX_CON[ 26 ]
initial
begin
	EX_CON_expected[26] = 1'bX;
end 
// expected EX_CON[ 25 ]
initial
begin
	EX_CON_expected[25] = 1'bX;
end 
// expected EX_CON[ 24 ]
initial
begin
	EX_CON_expected[24] = 1'bX;
end 
// expected EX_CON[ 23 ]
initial
begin
	EX_CON_expected[23] = 1'bX;
end 
// expected EX_CON[ 22 ]
initial
begin
	EX_CON_expected[22] = 1'bX;
end 
// expected EX_CON[ 21 ]
initial
begin
	EX_CON_expected[21] = 1'bX;
end 
// expected EX_CON[ 20 ]
initial
begin
	EX_CON_expected[20] = 1'bX;
end 
// expected EX_CON[ 19 ]
initial
begin
	EX_CON_expected[19] = 1'bX;
end 
// expected EX_CON[ 18 ]
initial
begin
	EX_CON_expected[18] = 1'bX;
end 
// expected EX_CON[ 17 ]
initial
begin
	EX_CON_expected[17] = 1'bX;
end 
// expected EX_CON[ 16 ]
initial
begin
	EX_CON_expected[16] = 1'bX;
end 
// expected EX_CON[ 15 ]
initial
begin
	EX_CON_expected[15] = 1'bX;
end 
// expected EX_CON[ 14 ]
initial
begin
	EX_CON_expected[14] = 1'bX;
end 
// expected EX_CON[ 13 ]
initial
begin
	EX_CON_expected[13] = 1'bX;
end 
// expected EX_CON[ 12 ]
initial
begin
	EX_CON_expected[12] = 1'bX;
end 
// expected EX_CON[ 11 ]
initial
begin
	EX_CON_expected[11] = 1'bX;
end 
// expected EX_CON[ 10 ]
initial
begin
	EX_CON_expected[10] = 1'bX;
end 
// expected EX_CON[ 9 ]
initial
begin
	EX_CON_expected[9] = 1'bX;
end 
// expected EX_CON[ 8 ]
initial
begin
	EX_CON_expected[8] = 1'bX;
end 
// expected EX_CON[ 7 ]
initial
begin
	EX_CON_expected[7] = 1'bX;
end 
// expected EX_CON[ 6 ]
initial
begin
	EX_CON_expected[6] = 1'bX;
end 
// expected EX_CON[ 5 ]
initial
begin
	EX_CON_expected[5] = 1'bX;
end 
// expected EX_CON[ 4 ]
initial
begin
	EX_CON_expected[4] = 1'bX;
end 
// expected EX_CON[ 3 ]
initial
begin
	EX_CON_expected[3] = 1'bX;
end 
// expected EX_CON[ 2 ]
initial
begin
	EX_CON_expected[2] = 1'bX;
end 
// expected EX_CON[ 1 ]
initial
begin
	EX_CON_expected[1] = 1'bX;
end 
// expected EX_CON[ 0 ]
initial
begin
	EX_CON_expected[0] = 1'bX;
end 
// expected EX_TO[ 31 ]
initial
begin
	EX_TO_expected[31] = 1'bX;
end 
// expected EX_TO[ 30 ]
initial
begin
	EX_TO_expected[30] = 1'bX;
end 
// expected EX_TO[ 29 ]
initial
begin
	EX_TO_expected[29] = 1'bX;
end 
// expected EX_TO[ 28 ]
initial
begin
	EX_TO_expected[28] = 1'bX;
end 
// expected EX_TO[ 27 ]
initial
begin
	EX_TO_expected[27] = 1'bX;
end 
// expected EX_TO[ 26 ]
initial
begin
	EX_TO_expected[26] = 1'bX;
end 
// expected EX_TO[ 25 ]
initial
begin
	EX_TO_expected[25] = 1'bX;
end 
// expected EX_TO[ 24 ]
initial
begin
	EX_TO_expected[24] = 1'bX;
end 
// expected EX_TO[ 23 ]
initial
begin
	EX_TO_expected[23] = 1'bX;
end 
// expected EX_TO[ 22 ]
initial
begin
	EX_TO_expected[22] = 1'bX;
end 
// expected EX_TO[ 21 ]
initial
begin
	EX_TO_expected[21] = 1'bX;
end 
// expected EX_TO[ 20 ]
initial
begin
	EX_TO_expected[20] = 1'bX;
end 
// expected EX_TO[ 19 ]
initial
begin
	EX_TO_expected[19] = 1'bX;
end 
// expected EX_TO[ 18 ]
initial
begin
	EX_TO_expected[18] = 1'bX;
end 
// expected EX_TO[ 17 ]
initial
begin
	EX_TO_expected[17] = 1'bX;
end 
// expected EX_TO[ 16 ]
initial
begin
	EX_TO_expected[16] = 1'bX;
end 
// expected EX_TO[ 15 ]
initial
begin
	EX_TO_expected[15] = 1'bX;
end 
// expected EX_TO[ 14 ]
initial
begin
	EX_TO_expected[14] = 1'bX;
end 
// expected EX_TO[ 13 ]
initial
begin
	EX_TO_expected[13] = 1'bX;
end 
// expected EX_TO[ 12 ]
initial
begin
	EX_TO_expected[12] = 1'bX;
end 
// expected EX_TO[ 11 ]
initial
begin
	EX_TO_expected[11] = 1'bX;
end 
// expected EX_TO[ 10 ]
initial
begin
	EX_TO_expected[10] = 1'bX;
end 
// expected EX_TO[ 9 ]
initial
begin
	EX_TO_expected[9] = 1'bX;
end 
// expected EX_TO[ 8 ]
initial
begin
	EX_TO_expected[8] = 1'bX;
end 
// expected EX_TO[ 7 ]
initial
begin
	EX_TO_expected[7] = 1'bX;
end 
// expected EX_TO[ 6 ]
initial
begin
	EX_TO_expected[6] = 1'bX;
end 
// expected EX_TO[ 5 ]
initial
begin
	EX_TO_expected[5] = 1'bX;
end 
// expected EX_TO[ 4 ]
initial
begin
	EX_TO_expected[4] = 1'bX;
end 
// expected EX_TO[ 3 ]
initial
begin
	EX_TO_expected[3] = 1'bX;
end 
// expected EX_TO[ 2 ]
initial
begin
	EX_TO_expected[2] = 1'bX;
end 
// expected EX_TO[ 1 ]
initial
begin
	EX_TO_expected[1] = 1'bX;
end 
// expected EX_TO[ 0 ]
initial
begin
	EX_TO_expected[0] = 1'bX;
end 

// expected CNT_START
initial
begin
	CNT_START_expected = 1'bX;
end 

// expected INT_B
initial
begin
	INT_B_expected = 1'bX;
end 
// expected COUNT[ 31 ]
initial
begin
	COUNT_expected[31] = 1'bX;
end 
// expected COUNT[ 30 ]
initial
begin
	COUNT_expected[30] = 1'bX;
end 
// expected COUNT[ 29 ]
initial
begin
	COUNT_expected[29] = 1'bX;
end 
// expected COUNT[ 28 ]
initial
begin
	COUNT_expected[28] = 1'bX;
end 
// expected COUNT[ 27 ]
initial
begin
	COUNT_expected[27] = 1'bX;
end 
// expected COUNT[ 26 ]
initial
begin
	COUNT_expected[26] = 1'bX;
end 
// expected COUNT[ 25 ]
initial
begin
	COUNT_expected[25] = 1'bX;
end 
// expected COUNT[ 24 ]
initial
begin
	COUNT_expected[24] = 1'bX;
end 
// expected COUNT[ 23 ]
initial
begin
	COUNT_expected[23] = 1'bX;
end 
// expected COUNT[ 22 ]
initial
begin
	COUNT_expected[22] = 1'bX;
end 
// expected COUNT[ 21 ]
initial
begin
	COUNT_expected[21] = 1'bX;
end 
// expected COUNT[ 20 ]
initial
begin
	COUNT_expected[20] = 1'bX;
end 
// expected COUNT[ 19 ]
initial
begin
	COUNT_expected[19] = 1'bX;
end 
// expected COUNT[ 18 ]
initial
begin
	COUNT_expected[18] = 1'bX;
end 
// expected COUNT[ 17 ]
initial
begin
	COUNT_expected[17] = 1'bX;
end 
// expected COUNT[ 16 ]
initial
begin
	COUNT_expected[16] = 1'bX;
end 
// expected COUNT[ 15 ]
initial
begin
	COUNT_expected[15] = 1'bX;
end 
// expected COUNT[ 14 ]
initial
begin
	COUNT_expected[14] = 1'bX;
end 
// expected COUNT[ 13 ]
initial
begin
	COUNT_expected[13] = 1'bX;
end 
// expected COUNT[ 12 ]
initial
begin
	COUNT_expected[12] = 1'bX;
end 
// expected COUNT[ 11 ]
initial
begin
	COUNT_expected[11] = 1'bX;
end 
// expected COUNT[ 10 ]
initial
begin
	COUNT_expected[10] = 1'bX;
end 
// expected COUNT[ 9 ]
initial
begin
	COUNT_expected[9] = 1'bX;
end 
// expected COUNT[ 8 ]
initial
begin
	COUNT_expected[8] = 1'bX;
end 
// expected COUNT[ 7 ]
initial
begin
	COUNT_expected[7] = 1'bX;
end 
// expected COUNT[ 6 ]
initial
begin
	COUNT_expected[6] = 1'bX;
end 
// expected COUNT[ 5 ]
initial
begin
	COUNT_expected[5] = 1'bX;
end 
// expected COUNT[ 4 ]
initial
begin
	COUNT_expected[4] = 1'bX;
end 
// expected COUNT[ 3 ]
initial
begin
	COUNT_expected[3] = 1'bX;
end 
// expected COUNT[ 2 ]
initial
begin
	COUNT_expected[2] = 1'bX;
end 
// expected COUNT[ 1 ]
initial
begin
	COUNT_expected[1] = 1'bX;
end 
// expected COUNT[ 0 ]
initial
begin
	COUNT_expected[0] = 1'bX;
end 
// expected COUNT_NS[ 31 ]
initial
begin
	COUNT_NS_expected[31] = 1'bX;
end 
// expected COUNT_NS[ 30 ]
initial
begin
	COUNT_NS_expected[30] = 1'bX;
end 
// expected COUNT_NS[ 29 ]
initial
begin
	COUNT_NS_expected[29] = 1'bX;
end 
// expected COUNT_NS[ 28 ]
initial
begin
	COUNT_NS_expected[28] = 1'bX;
end 
// expected COUNT_NS[ 27 ]
initial
begin
	COUNT_NS_expected[27] = 1'bX;
end 
// expected COUNT_NS[ 26 ]
initial
begin
	COUNT_NS_expected[26] = 1'bX;
end 
// expected COUNT_NS[ 25 ]
initial
begin
	COUNT_NS_expected[25] = 1'bX;
end 
// expected COUNT_NS[ 24 ]
initial
begin
	COUNT_NS_expected[24] = 1'bX;
end 
// expected COUNT_NS[ 23 ]
initial
begin
	COUNT_NS_expected[23] = 1'bX;
end 
// expected COUNT_NS[ 22 ]
initial
begin
	COUNT_NS_expected[22] = 1'bX;
end 
// expected COUNT_NS[ 21 ]
initial
begin
	COUNT_NS_expected[21] = 1'bX;
end 
// expected COUNT_NS[ 20 ]
initial
begin
	COUNT_NS_expected[20] = 1'bX;
end 
// expected COUNT_NS[ 19 ]
initial
begin
	COUNT_NS_expected[19] = 1'bX;
end 
// expected COUNT_NS[ 18 ]
initial
begin
	COUNT_NS_expected[18] = 1'bX;
end 
// expected COUNT_NS[ 17 ]
initial
begin
	COUNT_NS_expected[17] = 1'bX;
end 
// expected COUNT_NS[ 16 ]
initial
begin
	COUNT_NS_expected[16] = 1'bX;
end 
// expected COUNT_NS[ 15 ]
initial
begin
	COUNT_NS_expected[15] = 1'bX;
end 
// expected COUNT_NS[ 14 ]
initial
begin
	COUNT_NS_expected[14] = 1'bX;
end 
// expected COUNT_NS[ 13 ]
initial
begin
	COUNT_NS_expected[13] = 1'bX;
end 
// expected COUNT_NS[ 12 ]
initial
begin
	COUNT_NS_expected[12] = 1'bX;
end 
// expected COUNT_NS[ 11 ]
initial
begin
	COUNT_NS_expected[11] = 1'bX;
end 
// expected COUNT_NS[ 10 ]
initial
begin
	COUNT_NS_expected[10] = 1'bX;
end 
// expected COUNT_NS[ 9 ]
initial
begin
	COUNT_NS_expected[9] = 1'bX;
end 
// expected COUNT_NS[ 8 ]
initial
begin
	COUNT_NS_expected[8] = 1'bX;
end 
// expected COUNT_NS[ 7 ]
initial
begin
	COUNT_NS_expected[7] = 1'bX;
end 
// expected COUNT_NS[ 6 ]
initial
begin
	COUNT_NS_expected[6] = 1'bX;
end 
// expected COUNT_NS[ 5 ]
initial
begin
	COUNT_NS_expected[5] = 1'bX;
end 
// expected COUNT_NS[ 4 ]
initial
begin
	COUNT_NS_expected[4] = 1'bX;
end 
// expected COUNT_NS[ 3 ]
initial
begin
	COUNT_NS_expected[3] = 1'bX;
end 
// expected COUNT_NS[ 2 ]
initial
begin
	COUNT_NS_expected[2] = 1'bX;
end 
// expected COUNT_NS[ 1 ]
initial
begin
	COUNT_NS_expected[1] = 1'bX;
end 
// expected COUNT_NS[ 0 ]
initial
begin
	COUNT_NS_expected[0] = 1'bX;
end 
// expected EX_CON_NS[ 31 ]
initial
begin
	EX_CON_NS_expected[31] = 1'bX;
end 
// expected EX_CON_NS[ 30 ]
initial
begin
	EX_CON_NS_expected[30] = 1'bX;
end 
// expected EX_CON_NS[ 29 ]
initial
begin
	EX_CON_NS_expected[29] = 1'bX;
end 
// expected EX_CON_NS[ 28 ]
initial
begin
	EX_CON_NS_expected[28] = 1'bX;
end 
// expected EX_CON_NS[ 27 ]
initial
begin
	EX_CON_NS_expected[27] = 1'bX;
end 
// expected EX_CON_NS[ 26 ]
initial
begin
	EX_CON_NS_expected[26] = 1'bX;
end 
// expected EX_CON_NS[ 25 ]
initial
begin
	EX_CON_NS_expected[25] = 1'bX;
end 
// expected EX_CON_NS[ 24 ]
initial
begin
	EX_CON_NS_expected[24] = 1'bX;
end 
// expected EX_CON_NS[ 23 ]
initial
begin
	EX_CON_NS_expected[23] = 1'bX;
end 
// expected EX_CON_NS[ 22 ]
initial
begin
	EX_CON_NS_expected[22] = 1'bX;
end 
// expected EX_CON_NS[ 21 ]
initial
begin
	EX_CON_NS_expected[21] = 1'bX;
end 
// expected EX_CON_NS[ 20 ]
initial
begin
	EX_CON_NS_expected[20] = 1'bX;
end 
// expected EX_CON_NS[ 19 ]
initial
begin
	EX_CON_NS_expected[19] = 1'bX;
end 
// expected EX_CON_NS[ 18 ]
initial
begin
	EX_CON_NS_expected[18] = 1'bX;
end 
// expected EX_CON_NS[ 17 ]
initial
begin
	EX_CON_NS_expected[17] = 1'bX;
end 
// expected EX_CON_NS[ 16 ]
initial
begin
	EX_CON_NS_expected[16] = 1'bX;
end 
// expected EX_CON_NS[ 15 ]
initial
begin
	EX_CON_NS_expected[15] = 1'bX;
end 
// expected EX_CON_NS[ 14 ]
initial
begin
	EX_CON_NS_expected[14] = 1'bX;
end 
// expected EX_CON_NS[ 13 ]
initial
begin
	EX_CON_NS_expected[13] = 1'bX;
end 
// expected EX_CON_NS[ 12 ]
initial
begin
	EX_CON_NS_expected[12] = 1'bX;
end 
// expected EX_CON_NS[ 11 ]
initial
begin
	EX_CON_NS_expected[11] = 1'bX;
end 
// expected EX_CON_NS[ 10 ]
initial
begin
	EX_CON_NS_expected[10] = 1'bX;
end 
// expected EX_CON_NS[ 9 ]
initial
begin
	EX_CON_NS_expected[9] = 1'bX;
end 
// expected EX_CON_NS[ 8 ]
initial
begin
	EX_CON_NS_expected[8] = 1'bX;
end 
// expected EX_CON_NS[ 7 ]
initial
begin
	EX_CON_NS_expected[7] = 1'bX;
end 
// expected EX_CON_NS[ 6 ]
initial
begin
	EX_CON_NS_expected[6] = 1'bX;
end 
// expected EX_CON_NS[ 5 ]
initial
begin
	EX_CON_NS_expected[5] = 1'bX;
end 
// expected EX_CON_NS[ 4 ]
initial
begin
	EX_CON_NS_expected[4] = 1'bX;
end 
// expected EX_CON_NS[ 3 ]
initial
begin
	EX_CON_NS_expected[3] = 1'bX;
end 
// expected EX_CON_NS[ 2 ]
initial
begin
	EX_CON_NS_expected[2] = 1'bX;
end 
// expected EX_CON_NS[ 1 ]
initial
begin
	EX_CON_NS_expected[1] = 1'bX;
end 
// expected EX_CON_NS[ 0 ]
initial
begin
	EX_CON_NS_expected[0] = 1'bX;
end 
// expected EX_TO_NS[ 31 ]
initial
begin
	EX_TO_NS_expected[31] = 1'bX;
end 
// expected EX_TO_NS[ 30 ]
initial
begin
	EX_TO_NS_expected[30] = 1'bX;
end 
// expected EX_TO_NS[ 29 ]
initial
begin
	EX_TO_NS_expected[29] = 1'bX;
end 
// expected EX_TO_NS[ 28 ]
initial
begin
	EX_TO_NS_expected[28] = 1'bX;
end 
// expected EX_TO_NS[ 27 ]
initial
begin
	EX_TO_NS_expected[27] = 1'bX;
end 
// expected EX_TO_NS[ 26 ]
initial
begin
	EX_TO_NS_expected[26] = 1'bX;
end 
// expected EX_TO_NS[ 25 ]
initial
begin
	EX_TO_NS_expected[25] = 1'bX;
end 
// expected EX_TO_NS[ 24 ]
initial
begin
	EX_TO_NS_expected[24] = 1'bX;
end 
// expected EX_TO_NS[ 23 ]
initial
begin
	EX_TO_NS_expected[23] = 1'bX;
end 
// expected EX_TO_NS[ 22 ]
initial
begin
	EX_TO_NS_expected[22] = 1'bX;
end 
// expected EX_TO_NS[ 21 ]
initial
begin
	EX_TO_NS_expected[21] = 1'bX;
end 
// expected EX_TO_NS[ 20 ]
initial
begin
	EX_TO_NS_expected[20] = 1'bX;
end 
// expected EX_TO_NS[ 19 ]
initial
begin
	EX_TO_NS_expected[19] = 1'bX;
end 
// expected EX_TO_NS[ 18 ]
initial
begin
	EX_TO_NS_expected[18] = 1'bX;
end 
// expected EX_TO_NS[ 17 ]
initial
begin
	EX_TO_NS_expected[17] = 1'bX;
end 
// expected EX_TO_NS[ 16 ]
initial
begin
	EX_TO_NS_expected[16] = 1'bX;
end 
// expected EX_TO_NS[ 15 ]
initial
begin
	EX_TO_NS_expected[15] = 1'bX;
end 
// expected EX_TO_NS[ 14 ]
initial
begin
	EX_TO_NS_expected[14] = 1'bX;
end 
// expected EX_TO_NS[ 13 ]
initial
begin
	EX_TO_NS_expected[13] = 1'bX;
end 
// expected EX_TO_NS[ 12 ]
initial
begin
	EX_TO_NS_expected[12] = 1'bX;
end 
// expected EX_TO_NS[ 11 ]
initial
begin
	EX_TO_NS_expected[11] = 1'bX;
end 
// expected EX_TO_NS[ 10 ]
initial
begin
	EX_TO_NS_expected[10] = 1'bX;
end 
// expected EX_TO_NS[ 9 ]
initial
begin
	EX_TO_NS_expected[9] = 1'bX;
end 
// expected EX_TO_NS[ 8 ]
initial
begin
	EX_TO_NS_expected[8] = 1'bX;
end 
// expected EX_TO_NS[ 7 ]
initial
begin
	EX_TO_NS_expected[7] = 1'bX;
end 
// expected EX_TO_NS[ 6 ]
initial
begin
	EX_TO_NS_expected[6] = 1'bX;
end 
// expected EX_TO_NS[ 5 ]
initial
begin
	EX_TO_NS_expected[5] = 1'bX;
end 
// expected EX_TO_NS[ 4 ]
initial
begin
	EX_TO_NS_expected[4] = 1'bX;
end 
// expected EX_TO_NS[ 3 ]
initial
begin
	EX_TO_NS_expected[3] = 1'bX;
end 
// expected EX_TO_NS[ 2 ]
initial
begin
	EX_TO_NS_expected[2] = 1'bX;
end 
// expected EX_TO_NS[ 1 ]
initial
begin
	EX_TO_NS_expected[1] = 1'bX;
end 
// expected EX_TO_NS[ 0 ]
initial
begin
	EX_TO_NS_expected[0] = 1'bX;
end 
// expected fsm_cs[ 2 ]
initial
begin
	fsm_cs_expected[2] = 1'bX;
end 
// expected fsm_cs[ 1 ]
initial
begin
	fsm_cs_expected[1] = 1'bX;
end 
// expected fsm_cs[ 0 ]
initial
begin
	fsm_cs_expected[0] = 1'bX;
end 
// expected fsm_ns[ 2 ]
initial
begin
	fsm_ns_expected[2] = 1'bX;
end 
// expected fsm_ns[ 1 ]
initial
begin
	fsm_ns_expected[1] = 1'bX;
end 
// expected fsm_ns[ 0 ]
initial
begin
	fsm_ns_expected[0] = 1'bX;
end 
// expected PRDATA[ 31 ]
initial
begin
	PRDATA_expected[31] = 1'bX;
end 
// expected PRDATA[ 30 ]
initial
begin
	PRDATA_expected[30] = 1'bX;
end 
// expected PRDATA[ 29 ]
initial
begin
	PRDATA_expected[29] = 1'bX;
end 
// expected PRDATA[ 28 ]
initial
begin
	PRDATA_expected[28] = 1'bX;
end 
// expected PRDATA[ 27 ]
initial
begin
	PRDATA_expected[27] = 1'bX;
end 
// expected PRDATA[ 26 ]
initial
begin
	PRDATA_expected[26] = 1'bX;
end 
// expected PRDATA[ 25 ]
initial
begin
	PRDATA_expected[25] = 1'bX;
end 
// expected PRDATA[ 24 ]
initial
begin
	PRDATA_expected[24] = 1'bX;
end 
// expected PRDATA[ 23 ]
initial
begin
	PRDATA_expected[23] = 1'bX;
end 
// expected PRDATA[ 22 ]
initial
begin
	PRDATA_expected[22] = 1'bX;
end 
// expected PRDATA[ 21 ]
initial
begin
	PRDATA_expected[21] = 1'bX;
end 
// expected PRDATA[ 20 ]
initial
begin
	PRDATA_expected[20] = 1'bX;
end 
// expected PRDATA[ 19 ]
initial
begin
	PRDATA_expected[19] = 1'bX;
end 
// expected PRDATA[ 18 ]
initial
begin
	PRDATA_expected[18] = 1'bX;
end 
// expected PRDATA[ 17 ]
initial
begin
	PRDATA_expected[17] = 1'bX;
end 
// expected PRDATA[ 16 ]
initial
begin
	PRDATA_expected[16] = 1'bX;
end 
// expected PRDATA[ 15 ]
initial
begin
	PRDATA_expected[15] = 1'bX;
end 
// expected PRDATA[ 14 ]
initial
begin
	PRDATA_expected[14] = 1'bX;
end 
// expected PRDATA[ 13 ]
initial
begin
	PRDATA_expected[13] = 1'bX;
end 
// expected PRDATA[ 12 ]
initial
begin
	PRDATA_expected[12] = 1'bX;
end 
// expected PRDATA[ 11 ]
initial
begin
	PRDATA_expected[11] = 1'bX;
end 
// expected PRDATA[ 10 ]
initial
begin
	PRDATA_expected[10] = 1'bX;
end 
// expected PRDATA[ 9 ]
initial
begin
	PRDATA_expected[9] = 1'bX;
end 
// expected PRDATA[ 8 ]
initial
begin
	PRDATA_expected[8] = 1'bX;
end 
// expected PRDATA[ 7 ]
initial
begin
	PRDATA_expected[7] = 1'bX;
end 
// expected PRDATA[ 6 ]
initial
begin
	PRDATA_expected[6] = 1'bX;
end 
// expected PRDATA[ 5 ]
initial
begin
	PRDATA_expected[5] = 1'bX;
end 
// expected PRDATA[ 4 ]
initial
begin
	PRDATA_expected[4] = 1'bX;
end 
// expected PRDATA[ 3 ]
initial
begin
	PRDATA_expected[3] = 1'bX;
end 
// expected PRDATA[ 2 ]
initial
begin
	PRDATA_expected[2] = 1'bX;
end 
// expected PRDATA[ 1 ]
initial
begin
	PRDATA_expected[1] = 1'bX;
end 
// expected PRDATA[ 0 ]
initial
begin
	PRDATA_expected[0] = 1'bX;
end 
// generate trigger
always @(CNT_START_expected or CNT_START or COUNT_expected or COUNT or COUNT_NS_expected or COUNT_NS or EX_CON_expected or EX_CON or EX_CON_NS_expected or EX_CON_NS or EX_TO_expected or EX_TO or EX_TO_NS_expected or EX_TO_NS or INT_B_expected or INT_B or PRDATA_expected or PRDATA or fsm_cs_expected or fsm_cs or fsm_ns_expected or fsm_ns)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CNT_START = %b | expected COUNT = %b | expected COUNT_NS = %b | expected EX_CON = %b | expected EX_CON_NS = %b | expected EX_TO = %b | expected EX_TO_NS = %b | expected INT_B = %b | expected PRDATA = %b | expected fsm_cs = %b | expected fsm_ns = %b | ",CNT_START_expected_prev,COUNT_expected_prev,COUNT_NS_expected_prev,EX_CON_expected_prev,EX_CON_NS_expected_prev,EX_TO_expected_prev,EX_TO_NS_expected_prev,INT_B_expected_prev,PRDATA_expected_prev,fsm_cs_expected_prev,fsm_ns_expected_prev);
	$display("| real CNT_START = %b | real COUNT = %b | real COUNT_NS = %b | real EX_CON = %b | real EX_CON_NS = %b | real EX_TO = %b | real EX_TO_NS = %b | real INT_B = %b | real PRDATA = %b | real fsm_cs = %b | real fsm_ns = %b | ",CNT_START_prev,COUNT_prev,COUNT_NS_prev,EX_CON_prev,EX_CON_NS_prev,EX_TO_prev,EX_TO_NS_prev,INT_B_prev,PRDATA_prev,fsm_cs_prev,fsm_ns_prev);
`endif
	if (
		( CNT_START_expected_prev !== 1'bx ) && ( CNT_START_prev !== CNT_START_expected_prev )
		&& ((CNT_START_expected_prev !== last_CNT_START_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CNT_START :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CNT_START_expected_prev);
		$display ("     Real value = %b", CNT_START_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CNT_START_exp = CNT_START_expected_prev;
	end
	if (
		( COUNT_expected_prev[0] !== 1'bx ) && ( COUNT_prev[0] !== COUNT_expected_prev[0] )
		&& ((COUNT_expected_prev[0] !== last_COUNT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[0] = COUNT_expected_prev[0];
	end
	if (
		( COUNT_expected_prev[1] !== 1'bx ) && ( COUNT_prev[1] !== COUNT_expected_prev[1] )
		&& ((COUNT_expected_prev[1] !== last_COUNT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[1] = COUNT_expected_prev[1];
	end
	if (
		( COUNT_expected_prev[2] !== 1'bx ) && ( COUNT_prev[2] !== COUNT_expected_prev[2] )
		&& ((COUNT_expected_prev[2] !== last_COUNT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[2] = COUNT_expected_prev[2];
	end
	if (
		( COUNT_expected_prev[3] !== 1'bx ) && ( COUNT_prev[3] !== COUNT_expected_prev[3] )
		&& ((COUNT_expected_prev[3] !== last_COUNT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[3] = COUNT_expected_prev[3];
	end
	if (
		( COUNT_expected_prev[4] !== 1'bx ) && ( COUNT_prev[4] !== COUNT_expected_prev[4] )
		&& ((COUNT_expected_prev[4] !== last_COUNT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[4] = COUNT_expected_prev[4];
	end
	if (
		( COUNT_expected_prev[5] !== 1'bx ) && ( COUNT_prev[5] !== COUNT_expected_prev[5] )
		&& ((COUNT_expected_prev[5] !== last_COUNT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[5] = COUNT_expected_prev[5];
	end
	if (
		( COUNT_expected_prev[6] !== 1'bx ) && ( COUNT_prev[6] !== COUNT_expected_prev[6] )
		&& ((COUNT_expected_prev[6] !== last_COUNT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[6] = COUNT_expected_prev[6];
	end
	if (
		( COUNT_expected_prev[7] !== 1'bx ) && ( COUNT_prev[7] !== COUNT_expected_prev[7] )
		&& ((COUNT_expected_prev[7] !== last_COUNT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[7] = COUNT_expected_prev[7];
	end
	if (
		( COUNT_expected_prev[8] !== 1'bx ) && ( COUNT_prev[8] !== COUNT_expected_prev[8] )
		&& ((COUNT_expected_prev[8] !== last_COUNT_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[8] = COUNT_expected_prev[8];
	end
	if (
		( COUNT_expected_prev[9] !== 1'bx ) && ( COUNT_prev[9] !== COUNT_expected_prev[9] )
		&& ((COUNT_expected_prev[9] !== last_COUNT_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[9] = COUNT_expected_prev[9];
	end
	if (
		( COUNT_expected_prev[10] !== 1'bx ) && ( COUNT_prev[10] !== COUNT_expected_prev[10] )
		&& ((COUNT_expected_prev[10] !== last_COUNT_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[10] = COUNT_expected_prev[10];
	end
	if (
		( COUNT_expected_prev[11] !== 1'bx ) && ( COUNT_prev[11] !== COUNT_expected_prev[11] )
		&& ((COUNT_expected_prev[11] !== last_COUNT_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[11] = COUNT_expected_prev[11];
	end
	if (
		( COUNT_expected_prev[12] !== 1'bx ) && ( COUNT_prev[12] !== COUNT_expected_prev[12] )
		&& ((COUNT_expected_prev[12] !== last_COUNT_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[12] = COUNT_expected_prev[12];
	end
	if (
		( COUNT_expected_prev[13] !== 1'bx ) && ( COUNT_prev[13] !== COUNT_expected_prev[13] )
		&& ((COUNT_expected_prev[13] !== last_COUNT_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[13] = COUNT_expected_prev[13];
	end
	if (
		( COUNT_expected_prev[14] !== 1'bx ) && ( COUNT_prev[14] !== COUNT_expected_prev[14] )
		&& ((COUNT_expected_prev[14] !== last_COUNT_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[14] = COUNT_expected_prev[14];
	end
	if (
		( COUNT_expected_prev[15] !== 1'bx ) && ( COUNT_prev[15] !== COUNT_expected_prev[15] )
		&& ((COUNT_expected_prev[15] !== last_COUNT_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[15] = COUNT_expected_prev[15];
	end
	if (
		( COUNT_expected_prev[16] !== 1'bx ) && ( COUNT_prev[16] !== COUNT_expected_prev[16] )
		&& ((COUNT_expected_prev[16] !== last_COUNT_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[16] = COUNT_expected_prev[16];
	end
	if (
		( COUNT_expected_prev[17] !== 1'bx ) && ( COUNT_prev[17] !== COUNT_expected_prev[17] )
		&& ((COUNT_expected_prev[17] !== last_COUNT_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[17] = COUNT_expected_prev[17];
	end
	if (
		( COUNT_expected_prev[18] !== 1'bx ) && ( COUNT_prev[18] !== COUNT_expected_prev[18] )
		&& ((COUNT_expected_prev[18] !== last_COUNT_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[18] = COUNT_expected_prev[18];
	end
	if (
		( COUNT_expected_prev[19] !== 1'bx ) && ( COUNT_prev[19] !== COUNT_expected_prev[19] )
		&& ((COUNT_expected_prev[19] !== last_COUNT_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[19] = COUNT_expected_prev[19];
	end
	if (
		( COUNT_expected_prev[20] !== 1'bx ) && ( COUNT_prev[20] !== COUNT_expected_prev[20] )
		&& ((COUNT_expected_prev[20] !== last_COUNT_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[20] = COUNT_expected_prev[20];
	end
	if (
		( COUNT_expected_prev[21] !== 1'bx ) && ( COUNT_prev[21] !== COUNT_expected_prev[21] )
		&& ((COUNT_expected_prev[21] !== last_COUNT_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[21] = COUNT_expected_prev[21];
	end
	if (
		( COUNT_expected_prev[22] !== 1'bx ) && ( COUNT_prev[22] !== COUNT_expected_prev[22] )
		&& ((COUNT_expected_prev[22] !== last_COUNT_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[22] = COUNT_expected_prev[22];
	end
	if (
		( COUNT_expected_prev[23] !== 1'bx ) && ( COUNT_prev[23] !== COUNT_expected_prev[23] )
		&& ((COUNT_expected_prev[23] !== last_COUNT_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[23] = COUNT_expected_prev[23];
	end
	if (
		( COUNT_expected_prev[24] !== 1'bx ) && ( COUNT_prev[24] !== COUNT_expected_prev[24] )
		&& ((COUNT_expected_prev[24] !== last_COUNT_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[24] = COUNT_expected_prev[24];
	end
	if (
		( COUNT_expected_prev[25] !== 1'bx ) && ( COUNT_prev[25] !== COUNT_expected_prev[25] )
		&& ((COUNT_expected_prev[25] !== last_COUNT_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[25] = COUNT_expected_prev[25];
	end
	if (
		( COUNT_expected_prev[26] !== 1'bx ) && ( COUNT_prev[26] !== COUNT_expected_prev[26] )
		&& ((COUNT_expected_prev[26] !== last_COUNT_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[26] = COUNT_expected_prev[26];
	end
	if (
		( COUNT_expected_prev[27] !== 1'bx ) && ( COUNT_prev[27] !== COUNT_expected_prev[27] )
		&& ((COUNT_expected_prev[27] !== last_COUNT_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[27] = COUNT_expected_prev[27];
	end
	if (
		( COUNT_expected_prev[28] !== 1'bx ) && ( COUNT_prev[28] !== COUNT_expected_prev[28] )
		&& ((COUNT_expected_prev[28] !== last_COUNT_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[28] = COUNT_expected_prev[28];
	end
	if (
		( COUNT_expected_prev[29] !== 1'bx ) && ( COUNT_prev[29] !== COUNT_expected_prev[29] )
		&& ((COUNT_expected_prev[29] !== last_COUNT_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[29] = COUNT_expected_prev[29];
	end
	if (
		( COUNT_expected_prev[30] !== 1'bx ) && ( COUNT_prev[30] !== COUNT_expected_prev[30] )
		&& ((COUNT_expected_prev[30] !== last_COUNT_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[30] = COUNT_expected_prev[30];
	end
	if (
		( COUNT_expected_prev[31] !== 1'bx ) && ( COUNT_prev[31] !== COUNT_expected_prev[31] )
		&& ((COUNT_expected_prev[31] !== last_COUNT_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_expected_prev);
		$display ("     Real value = %b", COUNT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_COUNT_exp[31] = COUNT_expected_prev[31];
	end
	if (
		( COUNT_NS_expected_prev[0] !== 1'bx ) && ( COUNT_NS_prev[0] !== COUNT_NS_expected_prev[0] )
		&& ((COUNT_NS_expected_prev[0] !== last_COUNT_NS_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[0] = COUNT_NS_expected_prev[0];
	end
	if (
		( COUNT_NS_expected_prev[1] !== 1'bx ) && ( COUNT_NS_prev[1] !== COUNT_NS_expected_prev[1] )
		&& ((COUNT_NS_expected_prev[1] !== last_COUNT_NS_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[1] = COUNT_NS_expected_prev[1];
	end
	if (
		( COUNT_NS_expected_prev[2] !== 1'bx ) && ( COUNT_NS_prev[2] !== COUNT_NS_expected_prev[2] )
		&& ((COUNT_NS_expected_prev[2] !== last_COUNT_NS_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[2] = COUNT_NS_expected_prev[2];
	end
	if (
		( COUNT_NS_expected_prev[3] !== 1'bx ) && ( COUNT_NS_prev[3] !== COUNT_NS_expected_prev[3] )
		&& ((COUNT_NS_expected_prev[3] !== last_COUNT_NS_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[3] = COUNT_NS_expected_prev[3];
	end
	if (
		( COUNT_NS_expected_prev[4] !== 1'bx ) && ( COUNT_NS_prev[4] !== COUNT_NS_expected_prev[4] )
		&& ((COUNT_NS_expected_prev[4] !== last_COUNT_NS_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[4] = COUNT_NS_expected_prev[4];
	end
	if (
		( COUNT_NS_expected_prev[5] !== 1'bx ) && ( COUNT_NS_prev[5] !== COUNT_NS_expected_prev[5] )
		&& ((COUNT_NS_expected_prev[5] !== last_COUNT_NS_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[5] = COUNT_NS_expected_prev[5];
	end
	if (
		( COUNT_NS_expected_prev[6] !== 1'bx ) && ( COUNT_NS_prev[6] !== COUNT_NS_expected_prev[6] )
		&& ((COUNT_NS_expected_prev[6] !== last_COUNT_NS_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[6] = COUNT_NS_expected_prev[6];
	end
	if (
		( COUNT_NS_expected_prev[7] !== 1'bx ) && ( COUNT_NS_prev[7] !== COUNT_NS_expected_prev[7] )
		&& ((COUNT_NS_expected_prev[7] !== last_COUNT_NS_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[7] = COUNT_NS_expected_prev[7];
	end
	if (
		( COUNT_NS_expected_prev[8] !== 1'bx ) && ( COUNT_NS_prev[8] !== COUNT_NS_expected_prev[8] )
		&& ((COUNT_NS_expected_prev[8] !== last_COUNT_NS_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[8] = COUNT_NS_expected_prev[8];
	end
	if (
		( COUNT_NS_expected_prev[9] !== 1'bx ) && ( COUNT_NS_prev[9] !== COUNT_NS_expected_prev[9] )
		&& ((COUNT_NS_expected_prev[9] !== last_COUNT_NS_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[9] = COUNT_NS_expected_prev[9];
	end
	if (
		( COUNT_NS_expected_prev[10] !== 1'bx ) && ( COUNT_NS_prev[10] !== COUNT_NS_expected_prev[10] )
		&& ((COUNT_NS_expected_prev[10] !== last_COUNT_NS_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[10] = COUNT_NS_expected_prev[10];
	end
	if (
		( COUNT_NS_expected_prev[11] !== 1'bx ) && ( COUNT_NS_prev[11] !== COUNT_NS_expected_prev[11] )
		&& ((COUNT_NS_expected_prev[11] !== last_COUNT_NS_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[11] = COUNT_NS_expected_prev[11];
	end
	if (
		( COUNT_NS_expected_prev[12] !== 1'bx ) && ( COUNT_NS_prev[12] !== COUNT_NS_expected_prev[12] )
		&& ((COUNT_NS_expected_prev[12] !== last_COUNT_NS_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[12] = COUNT_NS_expected_prev[12];
	end
	if (
		( COUNT_NS_expected_prev[13] !== 1'bx ) && ( COUNT_NS_prev[13] !== COUNT_NS_expected_prev[13] )
		&& ((COUNT_NS_expected_prev[13] !== last_COUNT_NS_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[13] = COUNT_NS_expected_prev[13];
	end
	if (
		( COUNT_NS_expected_prev[14] !== 1'bx ) && ( COUNT_NS_prev[14] !== COUNT_NS_expected_prev[14] )
		&& ((COUNT_NS_expected_prev[14] !== last_COUNT_NS_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[14] = COUNT_NS_expected_prev[14];
	end
	if (
		( COUNT_NS_expected_prev[15] !== 1'bx ) && ( COUNT_NS_prev[15] !== COUNT_NS_expected_prev[15] )
		&& ((COUNT_NS_expected_prev[15] !== last_COUNT_NS_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[15] = COUNT_NS_expected_prev[15];
	end
	if (
		( COUNT_NS_expected_prev[16] !== 1'bx ) && ( COUNT_NS_prev[16] !== COUNT_NS_expected_prev[16] )
		&& ((COUNT_NS_expected_prev[16] !== last_COUNT_NS_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[16] = COUNT_NS_expected_prev[16];
	end
	if (
		( COUNT_NS_expected_prev[17] !== 1'bx ) && ( COUNT_NS_prev[17] !== COUNT_NS_expected_prev[17] )
		&& ((COUNT_NS_expected_prev[17] !== last_COUNT_NS_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[17] = COUNT_NS_expected_prev[17];
	end
	if (
		( COUNT_NS_expected_prev[18] !== 1'bx ) && ( COUNT_NS_prev[18] !== COUNT_NS_expected_prev[18] )
		&& ((COUNT_NS_expected_prev[18] !== last_COUNT_NS_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[18] = COUNT_NS_expected_prev[18];
	end
	if (
		( COUNT_NS_expected_prev[19] !== 1'bx ) && ( COUNT_NS_prev[19] !== COUNT_NS_expected_prev[19] )
		&& ((COUNT_NS_expected_prev[19] !== last_COUNT_NS_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[19] = COUNT_NS_expected_prev[19];
	end
	if (
		( COUNT_NS_expected_prev[20] !== 1'bx ) && ( COUNT_NS_prev[20] !== COUNT_NS_expected_prev[20] )
		&& ((COUNT_NS_expected_prev[20] !== last_COUNT_NS_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[20] = COUNT_NS_expected_prev[20];
	end
	if (
		( COUNT_NS_expected_prev[21] !== 1'bx ) && ( COUNT_NS_prev[21] !== COUNT_NS_expected_prev[21] )
		&& ((COUNT_NS_expected_prev[21] !== last_COUNT_NS_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[21] = COUNT_NS_expected_prev[21];
	end
	if (
		( COUNT_NS_expected_prev[22] !== 1'bx ) && ( COUNT_NS_prev[22] !== COUNT_NS_expected_prev[22] )
		&& ((COUNT_NS_expected_prev[22] !== last_COUNT_NS_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[22] = COUNT_NS_expected_prev[22];
	end
	if (
		( COUNT_NS_expected_prev[23] !== 1'bx ) && ( COUNT_NS_prev[23] !== COUNT_NS_expected_prev[23] )
		&& ((COUNT_NS_expected_prev[23] !== last_COUNT_NS_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[23] = COUNT_NS_expected_prev[23];
	end
	if (
		( COUNT_NS_expected_prev[24] !== 1'bx ) && ( COUNT_NS_prev[24] !== COUNT_NS_expected_prev[24] )
		&& ((COUNT_NS_expected_prev[24] !== last_COUNT_NS_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[24] = COUNT_NS_expected_prev[24];
	end
	if (
		( COUNT_NS_expected_prev[25] !== 1'bx ) && ( COUNT_NS_prev[25] !== COUNT_NS_expected_prev[25] )
		&& ((COUNT_NS_expected_prev[25] !== last_COUNT_NS_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[25] = COUNT_NS_expected_prev[25];
	end
	if (
		( COUNT_NS_expected_prev[26] !== 1'bx ) && ( COUNT_NS_prev[26] !== COUNT_NS_expected_prev[26] )
		&& ((COUNT_NS_expected_prev[26] !== last_COUNT_NS_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[26] = COUNT_NS_expected_prev[26];
	end
	if (
		( COUNT_NS_expected_prev[27] !== 1'bx ) && ( COUNT_NS_prev[27] !== COUNT_NS_expected_prev[27] )
		&& ((COUNT_NS_expected_prev[27] !== last_COUNT_NS_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[27] = COUNT_NS_expected_prev[27];
	end
	if (
		( COUNT_NS_expected_prev[28] !== 1'bx ) && ( COUNT_NS_prev[28] !== COUNT_NS_expected_prev[28] )
		&& ((COUNT_NS_expected_prev[28] !== last_COUNT_NS_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[28] = COUNT_NS_expected_prev[28];
	end
	if (
		( COUNT_NS_expected_prev[29] !== 1'bx ) && ( COUNT_NS_prev[29] !== COUNT_NS_expected_prev[29] )
		&& ((COUNT_NS_expected_prev[29] !== last_COUNT_NS_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[29] = COUNT_NS_expected_prev[29];
	end
	if (
		( COUNT_NS_expected_prev[30] !== 1'bx ) && ( COUNT_NS_prev[30] !== COUNT_NS_expected_prev[30] )
		&& ((COUNT_NS_expected_prev[30] !== last_COUNT_NS_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[30] = COUNT_NS_expected_prev[30];
	end
	if (
		( COUNT_NS_expected_prev[31] !== 1'bx ) && ( COUNT_NS_prev[31] !== COUNT_NS_expected_prev[31] )
		&& ((COUNT_NS_expected_prev[31] !== last_COUNT_NS_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUNT_NS[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUNT_NS_expected_prev);
		$display ("     Real value = %b", COUNT_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_COUNT_NS_exp[31] = COUNT_NS_expected_prev[31];
	end
	if (
		( EX_CON_expected_prev[0] !== 1'bx ) && ( EX_CON_prev[0] !== EX_CON_expected_prev[0] )
		&& ((EX_CON_expected_prev[0] !== last_EX_CON_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[0] = EX_CON_expected_prev[0];
	end
	if (
		( EX_CON_expected_prev[1] !== 1'bx ) && ( EX_CON_prev[1] !== EX_CON_expected_prev[1] )
		&& ((EX_CON_expected_prev[1] !== last_EX_CON_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[1] = EX_CON_expected_prev[1];
	end
	if (
		( EX_CON_expected_prev[2] !== 1'bx ) && ( EX_CON_prev[2] !== EX_CON_expected_prev[2] )
		&& ((EX_CON_expected_prev[2] !== last_EX_CON_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[2] = EX_CON_expected_prev[2];
	end
	if (
		( EX_CON_expected_prev[3] !== 1'bx ) && ( EX_CON_prev[3] !== EX_CON_expected_prev[3] )
		&& ((EX_CON_expected_prev[3] !== last_EX_CON_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[3] = EX_CON_expected_prev[3];
	end
	if (
		( EX_CON_expected_prev[4] !== 1'bx ) && ( EX_CON_prev[4] !== EX_CON_expected_prev[4] )
		&& ((EX_CON_expected_prev[4] !== last_EX_CON_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[4] = EX_CON_expected_prev[4];
	end
	if (
		( EX_CON_expected_prev[5] !== 1'bx ) && ( EX_CON_prev[5] !== EX_CON_expected_prev[5] )
		&& ((EX_CON_expected_prev[5] !== last_EX_CON_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[5] = EX_CON_expected_prev[5];
	end
	if (
		( EX_CON_expected_prev[6] !== 1'bx ) && ( EX_CON_prev[6] !== EX_CON_expected_prev[6] )
		&& ((EX_CON_expected_prev[6] !== last_EX_CON_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[6] = EX_CON_expected_prev[6];
	end
	if (
		( EX_CON_expected_prev[7] !== 1'bx ) && ( EX_CON_prev[7] !== EX_CON_expected_prev[7] )
		&& ((EX_CON_expected_prev[7] !== last_EX_CON_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[7] = EX_CON_expected_prev[7];
	end
	if (
		( EX_CON_expected_prev[8] !== 1'bx ) && ( EX_CON_prev[8] !== EX_CON_expected_prev[8] )
		&& ((EX_CON_expected_prev[8] !== last_EX_CON_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[8] = EX_CON_expected_prev[8];
	end
	if (
		( EX_CON_expected_prev[9] !== 1'bx ) && ( EX_CON_prev[9] !== EX_CON_expected_prev[9] )
		&& ((EX_CON_expected_prev[9] !== last_EX_CON_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[9] = EX_CON_expected_prev[9];
	end
	if (
		( EX_CON_expected_prev[10] !== 1'bx ) && ( EX_CON_prev[10] !== EX_CON_expected_prev[10] )
		&& ((EX_CON_expected_prev[10] !== last_EX_CON_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[10] = EX_CON_expected_prev[10];
	end
	if (
		( EX_CON_expected_prev[11] !== 1'bx ) && ( EX_CON_prev[11] !== EX_CON_expected_prev[11] )
		&& ((EX_CON_expected_prev[11] !== last_EX_CON_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[11] = EX_CON_expected_prev[11];
	end
	if (
		( EX_CON_expected_prev[12] !== 1'bx ) && ( EX_CON_prev[12] !== EX_CON_expected_prev[12] )
		&& ((EX_CON_expected_prev[12] !== last_EX_CON_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[12] = EX_CON_expected_prev[12];
	end
	if (
		( EX_CON_expected_prev[13] !== 1'bx ) && ( EX_CON_prev[13] !== EX_CON_expected_prev[13] )
		&& ((EX_CON_expected_prev[13] !== last_EX_CON_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[13] = EX_CON_expected_prev[13];
	end
	if (
		( EX_CON_expected_prev[14] !== 1'bx ) && ( EX_CON_prev[14] !== EX_CON_expected_prev[14] )
		&& ((EX_CON_expected_prev[14] !== last_EX_CON_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[14] = EX_CON_expected_prev[14];
	end
	if (
		( EX_CON_expected_prev[15] !== 1'bx ) && ( EX_CON_prev[15] !== EX_CON_expected_prev[15] )
		&& ((EX_CON_expected_prev[15] !== last_EX_CON_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[15] = EX_CON_expected_prev[15];
	end
	if (
		( EX_CON_expected_prev[16] !== 1'bx ) && ( EX_CON_prev[16] !== EX_CON_expected_prev[16] )
		&& ((EX_CON_expected_prev[16] !== last_EX_CON_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[16] = EX_CON_expected_prev[16];
	end
	if (
		( EX_CON_expected_prev[17] !== 1'bx ) && ( EX_CON_prev[17] !== EX_CON_expected_prev[17] )
		&& ((EX_CON_expected_prev[17] !== last_EX_CON_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[17] = EX_CON_expected_prev[17];
	end
	if (
		( EX_CON_expected_prev[18] !== 1'bx ) && ( EX_CON_prev[18] !== EX_CON_expected_prev[18] )
		&& ((EX_CON_expected_prev[18] !== last_EX_CON_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[18] = EX_CON_expected_prev[18];
	end
	if (
		( EX_CON_expected_prev[19] !== 1'bx ) && ( EX_CON_prev[19] !== EX_CON_expected_prev[19] )
		&& ((EX_CON_expected_prev[19] !== last_EX_CON_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[19] = EX_CON_expected_prev[19];
	end
	if (
		( EX_CON_expected_prev[20] !== 1'bx ) && ( EX_CON_prev[20] !== EX_CON_expected_prev[20] )
		&& ((EX_CON_expected_prev[20] !== last_EX_CON_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[20] = EX_CON_expected_prev[20];
	end
	if (
		( EX_CON_expected_prev[21] !== 1'bx ) && ( EX_CON_prev[21] !== EX_CON_expected_prev[21] )
		&& ((EX_CON_expected_prev[21] !== last_EX_CON_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[21] = EX_CON_expected_prev[21];
	end
	if (
		( EX_CON_expected_prev[22] !== 1'bx ) && ( EX_CON_prev[22] !== EX_CON_expected_prev[22] )
		&& ((EX_CON_expected_prev[22] !== last_EX_CON_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[22] = EX_CON_expected_prev[22];
	end
	if (
		( EX_CON_expected_prev[23] !== 1'bx ) && ( EX_CON_prev[23] !== EX_CON_expected_prev[23] )
		&& ((EX_CON_expected_prev[23] !== last_EX_CON_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[23] = EX_CON_expected_prev[23];
	end
	if (
		( EX_CON_expected_prev[24] !== 1'bx ) && ( EX_CON_prev[24] !== EX_CON_expected_prev[24] )
		&& ((EX_CON_expected_prev[24] !== last_EX_CON_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[24] = EX_CON_expected_prev[24];
	end
	if (
		( EX_CON_expected_prev[25] !== 1'bx ) && ( EX_CON_prev[25] !== EX_CON_expected_prev[25] )
		&& ((EX_CON_expected_prev[25] !== last_EX_CON_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[25] = EX_CON_expected_prev[25];
	end
	if (
		( EX_CON_expected_prev[26] !== 1'bx ) && ( EX_CON_prev[26] !== EX_CON_expected_prev[26] )
		&& ((EX_CON_expected_prev[26] !== last_EX_CON_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[26] = EX_CON_expected_prev[26];
	end
	if (
		( EX_CON_expected_prev[27] !== 1'bx ) && ( EX_CON_prev[27] !== EX_CON_expected_prev[27] )
		&& ((EX_CON_expected_prev[27] !== last_EX_CON_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[27] = EX_CON_expected_prev[27];
	end
	if (
		( EX_CON_expected_prev[28] !== 1'bx ) && ( EX_CON_prev[28] !== EX_CON_expected_prev[28] )
		&& ((EX_CON_expected_prev[28] !== last_EX_CON_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[28] = EX_CON_expected_prev[28];
	end
	if (
		( EX_CON_expected_prev[29] !== 1'bx ) && ( EX_CON_prev[29] !== EX_CON_expected_prev[29] )
		&& ((EX_CON_expected_prev[29] !== last_EX_CON_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[29] = EX_CON_expected_prev[29];
	end
	if (
		( EX_CON_expected_prev[30] !== 1'bx ) && ( EX_CON_prev[30] !== EX_CON_expected_prev[30] )
		&& ((EX_CON_expected_prev[30] !== last_EX_CON_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[30] = EX_CON_expected_prev[30];
	end
	if (
		( EX_CON_expected_prev[31] !== 1'bx ) && ( EX_CON_prev[31] !== EX_CON_expected_prev[31] )
		&& ((EX_CON_expected_prev[31] !== last_EX_CON_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_expected_prev);
		$display ("     Real value = %b", EX_CON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EX_CON_exp[31] = EX_CON_expected_prev[31];
	end
	if (
		( EX_CON_NS_expected_prev[0] !== 1'bx ) && ( EX_CON_NS_prev[0] !== EX_CON_NS_expected_prev[0] )
		&& ((EX_CON_NS_expected_prev[0] !== last_EX_CON_NS_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[0] = EX_CON_NS_expected_prev[0];
	end
	if (
		( EX_CON_NS_expected_prev[1] !== 1'bx ) && ( EX_CON_NS_prev[1] !== EX_CON_NS_expected_prev[1] )
		&& ((EX_CON_NS_expected_prev[1] !== last_EX_CON_NS_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[1] = EX_CON_NS_expected_prev[1];
	end
	if (
		( EX_CON_NS_expected_prev[2] !== 1'bx ) && ( EX_CON_NS_prev[2] !== EX_CON_NS_expected_prev[2] )
		&& ((EX_CON_NS_expected_prev[2] !== last_EX_CON_NS_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[2] = EX_CON_NS_expected_prev[2];
	end
	if (
		( EX_CON_NS_expected_prev[3] !== 1'bx ) && ( EX_CON_NS_prev[3] !== EX_CON_NS_expected_prev[3] )
		&& ((EX_CON_NS_expected_prev[3] !== last_EX_CON_NS_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[3] = EX_CON_NS_expected_prev[3];
	end
	if (
		( EX_CON_NS_expected_prev[4] !== 1'bx ) && ( EX_CON_NS_prev[4] !== EX_CON_NS_expected_prev[4] )
		&& ((EX_CON_NS_expected_prev[4] !== last_EX_CON_NS_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[4] = EX_CON_NS_expected_prev[4];
	end
	if (
		( EX_CON_NS_expected_prev[5] !== 1'bx ) && ( EX_CON_NS_prev[5] !== EX_CON_NS_expected_prev[5] )
		&& ((EX_CON_NS_expected_prev[5] !== last_EX_CON_NS_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[5] = EX_CON_NS_expected_prev[5];
	end
	if (
		( EX_CON_NS_expected_prev[6] !== 1'bx ) && ( EX_CON_NS_prev[6] !== EX_CON_NS_expected_prev[6] )
		&& ((EX_CON_NS_expected_prev[6] !== last_EX_CON_NS_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[6] = EX_CON_NS_expected_prev[6];
	end
	if (
		( EX_CON_NS_expected_prev[7] !== 1'bx ) && ( EX_CON_NS_prev[7] !== EX_CON_NS_expected_prev[7] )
		&& ((EX_CON_NS_expected_prev[7] !== last_EX_CON_NS_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[7] = EX_CON_NS_expected_prev[7];
	end
	if (
		( EX_CON_NS_expected_prev[8] !== 1'bx ) && ( EX_CON_NS_prev[8] !== EX_CON_NS_expected_prev[8] )
		&& ((EX_CON_NS_expected_prev[8] !== last_EX_CON_NS_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[8] = EX_CON_NS_expected_prev[8];
	end
	if (
		( EX_CON_NS_expected_prev[9] !== 1'bx ) && ( EX_CON_NS_prev[9] !== EX_CON_NS_expected_prev[9] )
		&& ((EX_CON_NS_expected_prev[9] !== last_EX_CON_NS_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[9] = EX_CON_NS_expected_prev[9];
	end
	if (
		( EX_CON_NS_expected_prev[10] !== 1'bx ) && ( EX_CON_NS_prev[10] !== EX_CON_NS_expected_prev[10] )
		&& ((EX_CON_NS_expected_prev[10] !== last_EX_CON_NS_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[10] = EX_CON_NS_expected_prev[10];
	end
	if (
		( EX_CON_NS_expected_prev[11] !== 1'bx ) && ( EX_CON_NS_prev[11] !== EX_CON_NS_expected_prev[11] )
		&& ((EX_CON_NS_expected_prev[11] !== last_EX_CON_NS_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[11] = EX_CON_NS_expected_prev[11];
	end
	if (
		( EX_CON_NS_expected_prev[12] !== 1'bx ) && ( EX_CON_NS_prev[12] !== EX_CON_NS_expected_prev[12] )
		&& ((EX_CON_NS_expected_prev[12] !== last_EX_CON_NS_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[12] = EX_CON_NS_expected_prev[12];
	end
	if (
		( EX_CON_NS_expected_prev[13] !== 1'bx ) && ( EX_CON_NS_prev[13] !== EX_CON_NS_expected_prev[13] )
		&& ((EX_CON_NS_expected_prev[13] !== last_EX_CON_NS_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[13] = EX_CON_NS_expected_prev[13];
	end
	if (
		( EX_CON_NS_expected_prev[14] !== 1'bx ) && ( EX_CON_NS_prev[14] !== EX_CON_NS_expected_prev[14] )
		&& ((EX_CON_NS_expected_prev[14] !== last_EX_CON_NS_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[14] = EX_CON_NS_expected_prev[14];
	end
	if (
		( EX_CON_NS_expected_prev[15] !== 1'bx ) && ( EX_CON_NS_prev[15] !== EX_CON_NS_expected_prev[15] )
		&& ((EX_CON_NS_expected_prev[15] !== last_EX_CON_NS_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[15] = EX_CON_NS_expected_prev[15];
	end
	if (
		( EX_CON_NS_expected_prev[16] !== 1'bx ) && ( EX_CON_NS_prev[16] !== EX_CON_NS_expected_prev[16] )
		&& ((EX_CON_NS_expected_prev[16] !== last_EX_CON_NS_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[16] = EX_CON_NS_expected_prev[16];
	end
	if (
		( EX_CON_NS_expected_prev[17] !== 1'bx ) && ( EX_CON_NS_prev[17] !== EX_CON_NS_expected_prev[17] )
		&& ((EX_CON_NS_expected_prev[17] !== last_EX_CON_NS_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[17] = EX_CON_NS_expected_prev[17];
	end
	if (
		( EX_CON_NS_expected_prev[18] !== 1'bx ) && ( EX_CON_NS_prev[18] !== EX_CON_NS_expected_prev[18] )
		&& ((EX_CON_NS_expected_prev[18] !== last_EX_CON_NS_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[18] = EX_CON_NS_expected_prev[18];
	end
	if (
		( EX_CON_NS_expected_prev[19] !== 1'bx ) && ( EX_CON_NS_prev[19] !== EX_CON_NS_expected_prev[19] )
		&& ((EX_CON_NS_expected_prev[19] !== last_EX_CON_NS_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[19] = EX_CON_NS_expected_prev[19];
	end
	if (
		( EX_CON_NS_expected_prev[20] !== 1'bx ) && ( EX_CON_NS_prev[20] !== EX_CON_NS_expected_prev[20] )
		&& ((EX_CON_NS_expected_prev[20] !== last_EX_CON_NS_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[20] = EX_CON_NS_expected_prev[20];
	end
	if (
		( EX_CON_NS_expected_prev[21] !== 1'bx ) && ( EX_CON_NS_prev[21] !== EX_CON_NS_expected_prev[21] )
		&& ((EX_CON_NS_expected_prev[21] !== last_EX_CON_NS_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[21] = EX_CON_NS_expected_prev[21];
	end
	if (
		( EX_CON_NS_expected_prev[22] !== 1'bx ) && ( EX_CON_NS_prev[22] !== EX_CON_NS_expected_prev[22] )
		&& ((EX_CON_NS_expected_prev[22] !== last_EX_CON_NS_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[22] = EX_CON_NS_expected_prev[22];
	end
	if (
		( EX_CON_NS_expected_prev[23] !== 1'bx ) && ( EX_CON_NS_prev[23] !== EX_CON_NS_expected_prev[23] )
		&& ((EX_CON_NS_expected_prev[23] !== last_EX_CON_NS_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[23] = EX_CON_NS_expected_prev[23];
	end
	if (
		( EX_CON_NS_expected_prev[24] !== 1'bx ) && ( EX_CON_NS_prev[24] !== EX_CON_NS_expected_prev[24] )
		&& ((EX_CON_NS_expected_prev[24] !== last_EX_CON_NS_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[24] = EX_CON_NS_expected_prev[24];
	end
	if (
		( EX_CON_NS_expected_prev[25] !== 1'bx ) && ( EX_CON_NS_prev[25] !== EX_CON_NS_expected_prev[25] )
		&& ((EX_CON_NS_expected_prev[25] !== last_EX_CON_NS_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[25] = EX_CON_NS_expected_prev[25];
	end
	if (
		( EX_CON_NS_expected_prev[26] !== 1'bx ) && ( EX_CON_NS_prev[26] !== EX_CON_NS_expected_prev[26] )
		&& ((EX_CON_NS_expected_prev[26] !== last_EX_CON_NS_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[26] = EX_CON_NS_expected_prev[26];
	end
	if (
		( EX_CON_NS_expected_prev[27] !== 1'bx ) && ( EX_CON_NS_prev[27] !== EX_CON_NS_expected_prev[27] )
		&& ((EX_CON_NS_expected_prev[27] !== last_EX_CON_NS_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[27] = EX_CON_NS_expected_prev[27];
	end
	if (
		( EX_CON_NS_expected_prev[28] !== 1'bx ) && ( EX_CON_NS_prev[28] !== EX_CON_NS_expected_prev[28] )
		&& ((EX_CON_NS_expected_prev[28] !== last_EX_CON_NS_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[28] = EX_CON_NS_expected_prev[28];
	end
	if (
		( EX_CON_NS_expected_prev[29] !== 1'bx ) && ( EX_CON_NS_prev[29] !== EX_CON_NS_expected_prev[29] )
		&& ((EX_CON_NS_expected_prev[29] !== last_EX_CON_NS_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[29] = EX_CON_NS_expected_prev[29];
	end
	if (
		( EX_CON_NS_expected_prev[30] !== 1'bx ) && ( EX_CON_NS_prev[30] !== EX_CON_NS_expected_prev[30] )
		&& ((EX_CON_NS_expected_prev[30] !== last_EX_CON_NS_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[30] = EX_CON_NS_expected_prev[30];
	end
	if (
		( EX_CON_NS_expected_prev[31] !== 1'bx ) && ( EX_CON_NS_prev[31] !== EX_CON_NS_expected_prev[31] )
		&& ((EX_CON_NS_expected_prev[31] !== last_EX_CON_NS_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_CON_NS[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_CON_NS_expected_prev);
		$display ("     Real value = %b", EX_CON_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EX_CON_NS_exp[31] = EX_CON_NS_expected_prev[31];
	end
	if (
		( EX_TO_expected_prev[0] !== 1'bx ) && ( EX_TO_prev[0] !== EX_TO_expected_prev[0] )
		&& ((EX_TO_expected_prev[0] !== last_EX_TO_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[0] = EX_TO_expected_prev[0];
	end
	if (
		( EX_TO_expected_prev[1] !== 1'bx ) && ( EX_TO_prev[1] !== EX_TO_expected_prev[1] )
		&& ((EX_TO_expected_prev[1] !== last_EX_TO_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[1] = EX_TO_expected_prev[1];
	end
	if (
		( EX_TO_expected_prev[2] !== 1'bx ) && ( EX_TO_prev[2] !== EX_TO_expected_prev[2] )
		&& ((EX_TO_expected_prev[2] !== last_EX_TO_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[2] = EX_TO_expected_prev[2];
	end
	if (
		( EX_TO_expected_prev[3] !== 1'bx ) && ( EX_TO_prev[3] !== EX_TO_expected_prev[3] )
		&& ((EX_TO_expected_prev[3] !== last_EX_TO_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[3] = EX_TO_expected_prev[3];
	end
	if (
		( EX_TO_expected_prev[4] !== 1'bx ) && ( EX_TO_prev[4] !== EX_TO_expected_prev[4] )
		&& ((EX_TO_expected_prev[4] !== last_EX_TO_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[4] = EX_TO_expected_prev[4];
	end
	if (
		( EX_TO_expected_prev[5] !== 1'bx ) && ( EX_TO_prev[5] !== EX_TO_expected_prev[5] )
		&& ((EX_TO_expected_prev[5] !== last_EX_TO_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[5] = EX_TO_expected_prev[5];
	end
	if (
		( EX_TO_expected_prev[6] !== 1'bx ) && ( EX_TO_prev[6] !== EX_TO_expected_prev[6] )
		&& ((EX_TO_expected_prev[6] !== last_EX_TO_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[6] = EX_TO_expected_prev[6];
	end
	if (
		( EX_TO_expected_prev[7] !== 1'bx ) && ( EX_TO_prev[7] !== EX_TO_expected_prev[7] )
		&& ((EX_TO_expected_prev[7] !== last_EX_TO_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[7] = EX_TO_expected_prev[7];
	end
	if (
		( EX_TO_expected_prev[8] !== 1'bx ) && ( EX_TO_prev[8] !== EX_TO_expected_prev[8] )
		&& ((EX_TO_expected_prev[8] !== last_EX_TO_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[8] = EX_TO_expected_prev[8];
	end
	if (
		( EX_TO_expected_prev[9] !== 1'bx ) && ( EX_TO_prev[9] !== EX_TO_expected_prev[9] )
		&& ((EX_TO_expected_prev[9] !== last_EX_TO_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[9] = EX_TO_expected_prev[9];
	end
	if (
		( EX_TO_expected_prev[10] !== 1'bx ) && ( EX_TO_prev[10] !== EX_TO_expected_prev[10] )
		&& ((EX_TO_expected_prev[10] !== last_EX_TO_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[10] = EX_TO_expected_prev[10];
	end
	if (
		( EX_TO_expected_prev[11] !== 1'bx ) && ( EX_TO_prev[11] !== EX_TO_expected_prev[11] )
		&& ((EX_TO_expected_prev[11] !== last_EX_TO_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[11] = EX_TO_expected_prev[11];
	end
	if (
		( EX_TO_expected_prev[12] !== 1'bx ) && ( EX_TO_prev[12] !== EX_TO_expected_prev[12] )
		&& ((EX_TO_expected_prev[12] !== last_EX_TO_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[12] = EX_TO_expected_prev[12];
	end
	if (
		( EX_TO_expected_prev[13] !== 1'bx ) && ( EX_TO_prev[13] !== EX_TO_expected_prev[13] )
		&& ((EX_TO_expected_prev[13] !== last_EX_TO_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[13] = EX_TO_expected_prev[13];
	end
	if (
		( EX_TO_expected_prev[14] !== 1'bx ) && ( EX_TO_prev[14] !== EX_TO_expected_prev[14] )
		&& ((EX_TO_expected_prev[14] !== last_EX_TO_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[14] = EX_TO_expected_prev[14];
	end
	if (
		( EX_TO_expected_prev[15] !== 1'bx ) && ( EX_TO_prev[15] !== EX_TO_expected_prev[15] )
		&& ((EX_TO_expected_prev[15] !== last_EX_TO_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[15] = EX_TO_expected_prev[15];
	end
	if (
		( EX_TO_expected_prev[16] !== 1'bx ) && ( EX_TO_prev[16] !== EX_TO_expected_prev[16] )
		&& ((EX_TO_expected_prev[16] !== last_EX_TO_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[16] = EX_TO_expected_prev[16];
	end
	if (
		( EX_TO_expected_prev[17] !== 1'bx ) && ( EX_TO_prev[17] !== EX_TO_expected_prev[17] )
		&& ((EX_TO_expected_prev[17] !== last_EX_TO_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[17] = EX_TO_expected_prev[17];
	end
	if (
		( EX_TO_expected_prev[18] !== 1'bx ) && ( EX_TO_prev[18] !== EX_TO_expected_prev[18] )
		&& ((EX_TO_expected_prev[18] !== last_EX_TO_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[18] = EX_TO_expected_prev[18];
	end
	if (
		( EX_TO_expected_prev[19] !== 1'bx ) && ( EX_TO_prev[19] !== EX_TO_expected_prev[19] )
		&& ((EX_TO_expected_prev[19] !== last_EX_TO_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[19] = EX_TO_expected_prev[19];
	end
	if (
		( EX_TO_expected_prev[20] !== 1'bx ) && ( EX_TO_prev[20] !== EX_TO_expected_prev[20] )
		&& ((EX_TO_expected_prev[20] !== last_EX_TO_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[20] = EX_TO_expected_prev[20];
	end
	if (
		( EX_TO_expected_prev[21] !== 1'bx ) && ( EX_TO_prev[21] !== EX_TO_expected_prev[21] )
		&& ((EX_TO_expected_prev[21] !== last_EX_TO_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[21] = EX_TO_expected_prev[21];
	end
	if (
		( EX_TO_expected_prev[22] !== 1'bx ) && ( EX_TO_prev[22] !== EX_TO_expected_prev[22] )
		&& ((EX_TO_expected_prev[22] !== last_EX_TO_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[22] = EX_TO_expected_prev[22];
	end
	if (
		( EX_TO_expected_prev[23] !== 1'bx ) && ( EX_TO_prev[23] !== EX_TO_expected_prev[23] )
		&& ((EX_TO_expected_prev[23] !== last_EX_TO_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[23] = EX_TO_expected_prev[23];
	end
	if (
		( EX_TO_expected_prev[24] !== 1'bx ) && ( EX_TO_prev[24] !== EX_TO_expected_prev[24] )
		&& ((EX_TO_expected_prev[24] !== last_EX_TO_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[24] = EX_TO_expected_prev[24];
	end
	if (
		( EX_TO_expected_prev[25] !== 1'bx ) && ( EX_TO_prev[25] !== EX_TO_expected_prev[25] )
		&& ((EX_TO_expected_prev[25] !== last_EX_TO_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[25] = EX_TO_expected_prev[25];
	end
	if (
		( EX_TO_expected_prev[26] !== 1'bx ) && ( EX_TO_prev[26] !== EX_TO_expected_prev[26] )
		&& ((EX_TO_expected_prev[26] !== last_EX_TO_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[26] = EX_TO_expected_prev[26];
	end
	if (
		( EX_TO_expected_prev[27] !== 1'bx ) && ( EX_TO_prev[27] !== EX_TO_expected_prev[27] )
		&& ((EX_TO_expected_prev[27] !== last_EX_TO_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[27] = EX_TO_expected_prev[27];
	end
	if (
		( EX_TO_expected_prev[28] !== 1'bx ) && ( EX_TO_prev[28] !== EX_TO_expected_prev[28] )
		&& ((EX_TO_expected_prev[28] !== last_EX_TO_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[28] = EX_TO_expected_prev[28];
	end
	if (
		( EX_TO_expected_prev[29] !== 1'bx ) && ( EX_TO_prev[29] !== EX_TO_expected_prev[29] )
		&& ((EX_TO_expected_prev[29] !== last_EX_TO_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[29] = EX_TO_expected_prev[29];
	end
	if (
		( EX_TO_expected_prev[30] !== 1'bx ) && ( EX_TO_prev[30] !== EX_TO_expected_prev[30] )
		&& ((EX_TO_expected_prev[30] !== last_EX_TO_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[30] = EX_TO_expected_prev[30];
	end
	if (
		( EX_TO_expected_prev[31] !== 1'bx ) && ( EX_TO_prev[31] !== EX_TO_expected_prev[31] )
		&& ((EX_TO_expected_prev[31] !== last_EX_TO_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_expected_prev);
		$display ("     Real value = %b", EX_TO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_EX_TO_exp[31] = EX_TO_expected_prev[31];
	end
	if (
		( EX_TO_NS_expected_prev[0] !== 1'bx ) && ( EX_TO_NS_prev[0] !== EX_TO_NS_expected_prev[0] )
		&& ((EX_TO_NS_expected_prev[0] !== last_EX_TO_NS_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[0] = EX_TO_NS_expected_prev[0];
	end
	if (
		( EX_TO_NS_expected_prev[1] !== 1'bx ) && ( EX_TO_NS_prev[1] !== EX_TO_NS_expected_prev[1] )
		&& ((EX_TO_NS_expected_prev[1] !== last_EX_TO_NS_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[1] = EX_TO_NS_expected_prev[1];
	end
	if (
		( EX_TO_NS_expected_prev[2] !== 1'bx ) && ( EX_TO_NS_prev[2] !== EX_TO_NS_expected_prev[2] )
		&& ((EX_TO_NS_expected_prev[2] !== last_EX_TO_NS_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[2] = EX_TO_NS_expected_prev[2];
	end
	if (
		( EX_TO_NS_expected_prev[3] !== 1'bx ) && ( EX_TO_NS_prev[3] !== EX_TO_NS_expected_prev[3] )
		&& ((EX_TO_NS_expected_prev[3] !== last_EX_TO_NS_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[3] = EX_TO_NS_expected_prev[3];
	end
	if (
		( EX_TO_NS_expected_prev[4] !== 1'bx ) && ( EX_TO_NS_prev[4] !== EX_TO_NS_expected_prev[4] )
		&& ((EX_TO_NS_expected_prev[4] !== last_EX_TO_NS_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[4] = EX_TO_NS_expected_prev[4];
	end
	if (
		( EX_TO_NS_expected_prev[5] !== 1'bx ) && ( EX_TO_NS_prev[5] !== EX_TO_NS_expected_prev[5] )
		&& ((EX_TO_NS_expected_prev[5] !== last_EX_TO_NS_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[5] = EX_TO_NS_expected_prev[5];
	end
	if (
		( EX_TO_NS_expected_prev[6] !== 1'bx ) && ( EX_TO_NS_prev[6] !== EX_TO_NS_expected_prev[6] )
		&& ((EX_TO_NS_expected_prev[6] !== last_EX_TO_NS_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[6] = EX_TO_NS_expected_prev[6];
	end
	if (
		( EX_TO_NS_expected_prev[7] !== 1'bx ) && ( EX_TO_NS_prev[7] !== EX_TO_NS_expected_prev[7] )
		&& ((EX_TO_NS_expected_prev[7] !== last_EX_TO_NS_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[7] = EX_TO_NS_expected_prev[7];
	end
	if (
		( EX_TO_NS_expected_prev[8] !== 1'bx ) && ( EX_TO_NS_prev[8] !== EX_TO_NS_expected_prev[8] )
		&& ((EX_TO_NS_expected_prev[8] !== last_EX_TO_NS_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[8] = EX_TO_NS_expected_prev[8];
	end
	if (
		( EX_TO_NS_expected_prev[9] !== 1'bx ) && ( EX_TO_NS_prev[9] !== EX_TO_NS_expected_prev[9] )
		&& ((EX_TO_NS_expected_prev[9] !== last_EX_TO_NS_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[9] = EX_TO_NS_expected_prev[9];
	end
	if (
		( EX_TO_NS_expected_prev[10] !== 1'bx ) && ( EX_TO_NS_prev[10] !== EX_TO_NS_expected_prev[10] )
		&& ((EX_TO_NS_expected_prev[10] !== last_EX_TO_NS_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[10] = EX_TO_NS_expected_prev[10];
	end
	if (
		( EX_TO_NS_expected_prev[11] !== 1'bx ) && ( EX_TO_NS_prev[11] !== EX_TO_NS_expected_prev[11] )
		&& ((EX_TO_NS_expected_prev[11] !== last_EX_TO_NS_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[11] = EX_TO_NS_expected_prev[11];
	end
	if (
		( EX_TO_NS_expected_prev[12] !== 1'bx ) && ( EX_TO_NS_prev[12] !== EX_TO_NS_expected_prev[12] )
		&& ((EX_TO_NS_expected_prev[12] !== last_EX_TO_NS_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[12] = EX_TO_NS_expected_prev[12];
	end
	if (
		( EX_TO_NS_expected_prev[13] !== 1'bx ) && ( EX_TO_NS_prev[13] !== EX_TO_NS_expected_prev[13] )
		&& ((EX_TO_NS_expected_prev[13] !== last_EX_TO_NS_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[13] = EX_TO_NS_expected_prev[13];
	end
	if (
		( EX_TO_NS_expected_prev[14] !== 1'bx ) && ( EX_TO_NS_prev[14] !== EX_TO_NS_expected_prev[14] )
		&& ((EX_TO_NS_expected_prev[14] !== last_EX_TO_NS_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[14] = EX_TO_NS_expected_prev[14];
	end
	if (
		( EX_TO_NS_expected_prev[15] !== 1'bx ) && ( EX_TO_NS_prev[15] !== EX_TO_NS_expected_prev[15] )
		&& ((EX_TO_NS_expected_prev[15] !== last_EX_TO_NS_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[15] = EX_TO_NS_expected_prev[15];
	end
	if (
		( EX_TO_NS_expected_prev[16] !== 1'bx ) && ( EX_TO_NS_prev[16] !== EX_TO_NS_expected_prev[16] )
		&& ((EX_TO_NS_expected_prev[16] !== last_EX_TO_NS_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[16] = EX_TO_NS_expected_prev[16];
	end
	if (
		( EX_TO_NS_expected_prev[17] !== 1'bx ) && ( EX_TO_NS_prev[17] !== EX_TO_NS_expected_prev[17] )
		&& ((EX_TO_NS_expected_prev[17] !== last_EX_TO_NS_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[17] = EX_TO_NS_expected_prev[17];
	end
	if (
		( EX_TO_NS_expected_prev[18] !== 1'bx ) && ( EX_TO_NS_prev[18] !== EX_TO_NS_expected_prev[18] )
		&& ((EX_TO_NS_expected_prev[18] !== last_EX_TO_NS_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[18] = EX_TO_NS_expected_prev[18];
	end
	if (
		( EX_TO_NS_expected_prev[19] !== 1'bx ) && ( EX_TO_NS_prev[19] !== EX_TO_NS_expected_prev[19] )
		&& ((EX_TO_NS_expected_prev[19] !== last_EX_TO_NS_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[19] = EX_TO_NS_expected_prev[19];
	end
	if (
		( EX_TO_NS_expected_prev[20] !== 1'bx ) && ( EX_TO_NS_prev[20] !== EX_TO_NS_expected_prev[20] )
		&& ((EX_TO_NS_expected_prev[20] !== last_EX_TO_NS_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[20] = EX_TO_NS_expected_prev[20];
	end
	if (
		( EX_TO_NS_expected_prev[21] !== 1'bx ) && ( EX_TO_NS_prev[21] !== EX_TO_NS_expected_prev[21] )
		&& ((EX_TO_NS_expected_prev[21] !== last_EX_TO_NS_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[21] = EX_TO_NS_expected_prev[21];
	end
	if (
		( EX_TO_NS_expected_prev[22] !== 1'bx ) && ( EX_TO_NS_prev[22] !== EX_TO_NS_expected_prev[22] )
		&& ((EX_TO_NS_expected_prev[22] !== last_EX_TO_NS_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[22] = EX_TO_NS_expected_prev[22];
	end
	if (
		( EX_TO_NS_expected_prev[23] !== 1'bx ) && ( EX_TO_NS_prev[23] !== EX_TO_NS_expected_prev[23] )
		&& ((EX_TO_NS_expected_prev[23] !== last_EX_TO_NS_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[23] = EX_TO_NS_expected_prev[23];
	end
	if (
		( EX_TO_NS_expected_prev[24] !== 1'bx ) && ( EX_TO_NS_prev[24] !== EX_TO_NS_expected_prev[24] )
		&& ((EX_TO_NS_expected_prev[24] !== last_EX_TO_NS_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[24] = EX_TO_NS_expected_prev[24];
	end
	if (
		( EX_TO_NS_expected_prev[25] !== 1'bx ) && ( EX_TO_NS_prev[25] !== EX_TO_NS_expected_prev[25] )
		&& ((EX_TO_NS_expected_prev[25] !== last_EX_TO_NS_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[25] = EX_TO_NS_expected_prev[25];
	end
	if (
		( EX_TO_NS_expected_prev[26] !== 1'bx ) && ( EX_TO_NS_prev[26] !== EX_TO_NS_expected_prev[26] )
		&& ((EX_TO_NS_expected_prev[26] !== last_EX_TO_NS_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[26] = EX_TO_NS_expected_prev[26];
	end
	if (
		( EX_TO_NS_expected_prev[27] !== 1'bx ) && ( EX_TO_NS_prev[27] !== EX_TO_NS_expected_prev[27] )
		&& ((EX_TO_NS_expected_prev[27] !== last_EX_TO_NS_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[27] = EX_TO_NS_expected_prev[27];
	end
	if (
		( EX_TO_NS_expected_prev[28] !== 1'bx ) && ( EX_TO_NS_prev[28] !== EX_TO_NS_expected_prev[28] )
		&& ((EX_TO_NS_expected_prev[28] !== last_EX_TO_NS_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[28] = EX_TO_NS_expected_prev[28];
	end
	if (
		( EX_TO_NS_expected_prev[29] !== 1'bx ) && ( EX_TO_NS_prev[29] !== EX_TO_NS_expected_prev[29] )
		&& ((EX_TO_NS_expected_prev[29] !== last_EX_TO_NS_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[29] = EX_TO_NS_expected_prev[29];
	end
	if (
		( EX_TO_NS_expected_prev[30] !== 1'bx ) && ( EX_TO_NS_prev[30] !== EX_TO_NS_expected_prev[30] )
		&& ((EX_TO_NS_expected_prev[30] !== last_EX_TO_NS_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[30] = EX_TO_NS_expected_prev[30];
	end
	if (
		( EX_TO_NS_expected_prev[31] !== 1'bx ) && ( EX_TO_NS_prev[31] !== EX_TO_NS_expected_prev[31] )
		&& ((EX_TO_NS_expected_prev[31] !== last_EX_TO_NS_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EX_TO_NS[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EX_TO_NS_expected_prev);
		$display ("     Real value = %b", EX_TO_NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EX_TO_NS_exp[31] = EX_TO_NS_expected_prev[31];
	end
	if (
		( INT_B_expected_prev !== 1'bx ) && ( INT_B_prev !== INT_B_expected_prev )
		&& ((INT_B_expected_prev !== last_INT_B_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INT_B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INT_B_expected_prev);
		$display ("     Real value = %b", INT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_INT_B_exp = INT_B_expected_prev;
	end
	if (
		( PRDATA_expected_prev[0] !== 1'bx ) && ( PRDATA_prev[0] !== PRDATA_expected_prev[0] )
		&& ((PRDATA_expected_prev[0] !== last_PRDATA_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[0] = PRDATA_expected_prev[0];
	end
	if (
		( PRDATA_expected_prev[1] !== 1'bx ) && ( PRDATA_prev[1] !== PRDATA_expected_prev[1] )
		&& ((PRDATA_expected_prev[1] !== last_PRDATA_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[1] = PRDATA_expected_prev[1];
	end
	if (
		( PRDATA_expected_prev[2] !== 1'bx ) && ( PRDATA_prev[2] !== PRDATA_expected_prev[2] )
		&& ((PRDATA_expected_prev[2] !== last_PRDATA_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[2] = PRDATA_expected_prev[2];
	end
	if (
		( PRDATA_expected_prev[3] !== 1'bx ) && ( PRDATA_prev[3] !== PRDATA_expected_prev[3] )
		&& ((PRDATA_expected_prev[3] !== last_PRDATA_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[3] = PRDATA_expected_prev[3];
	end
	if (
		( PRDATA_expected_prev[4] !== 1'bx ) && ( PRDATA_prev[4] !== PRDATA_expected_prev[4] )
		&& ((PRDATA_expected_prev[4] !== last_PRDATA_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[4] = PRDATA_expected_prev[4];
	end
	if (
		( PRDATA_expected_prev[5] !== 1'bx ) && ( PRDATA_prev[5] !== PRDATA_expected_prev[5] )
		&& ((PRDATA_expected_prev[5] !== last_PRDATA_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[5] = PRDATA_expected_prev[5];
	end
	if (
		( PRDATA_expected_prev[6] !== 1'bx ) && ( PRDATA_prev[6] !== PRDATA_expected_prev[6] )
		&& ((PRDATA_expected_prev[6] !== last_PRDATA_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[6] = PRDATA_expected_prev[6];
	end
	if (
		( PRDATA_expected_prev[7] !== 1'bx ) && ( PRDATA_prev[7] !== PRDATA_expected_prev[7] )
		&& ((PRDATA_expected_prev[7] !== last_PRDATA_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[7] = PRDATA_expected_prev[7];
	end
	if (
		( PRDATA_expected_prev[8] !== 1'bx ) && ( PRDATA_prev[8] !== PRDATA_expected_prev[8] )
		&& ((PRDATA_expected_prev[8] !== last_PRDATA_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[8] = PRDATA_expected_prev[8];
	end
	if (
		( PRDATA_expected_prev[9] !== 1'bx ) && ( PRDATA_prev[9] !== PRDATA_expected_prev[9] )
		&& ((PRDATA_expected_prev[9] !== last_PRDATA_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[9] = PRDATA_expected_prev[9];
	end
	if (
		( PRDATA_expected_prev[10] !== 1'bx ) && ( PRDATA_prev[10] !== PRDATA_expected_prev[10] )
		&& ((PRDATA_expected_prev[10] !== last_PRDATA_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[10] = PRDATA_expected_prev[10];
	end
	if (
		( PRDATA_expected_prev[11] !== 1'bx ) && ( PRDATA_prev[11] !== PRDATA_expected_prev[11] )
		&& ((PRDATA_expected_prev[11] !== last_PRDATA_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[11] = PRDATA_expected_prev[11];
	end
	if (
		( PRDATA_expected_prev[12] !== 1'bx ) && ( PRDATA_prev[12] !== PRDATA_expected_prev[12] )
		&& ((PRDATA_expected_prev[12] !== last_PRDATA_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[12] = PRDATA_expected_prev[12];
	end
	if (
		( PRDATA_expected_prev[13] !== 1'bx ) && ( PRDATA_prev[13] !== PRDATA_expected_prev[13] )
		&& ((PRDATA_expected_prev[13] !== last_PRDATA_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[13] = PRDATA_expected_prev[13];
	end
	if (
		( PRDATA_expected_prev[14] !== 1'bx ) && ( PRDATA_prev[14] !== PRDATA_expected_prev[14] )
		&& ((PRDATA_expected_prev[14] !== last_PRDATA_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[14] = PRDATA_expected_prev[14];
	end
	if (
		( PRDATA_expected_prev[15] !== 1'bx ) && ( PRDATA_prev[15] !== PRDATA_expected_prev[15] )
		&& ((PRDATA_expected_prev[15] !== last_PRDATA_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[15] = PRDATA_expected_prev[15];
	end
	if (
		( PRDATA_expected_prev[16] !== 1'bx ) && ( PRDATA_prev[16] !== PRDATA_expected_prev[16] )
		&& ((PRDATA_expected_prev[16] !== last_PRDATA_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[16] = PRDATA_expected_prev[16];
	end
	if (
		( PRDATA_expected_prev[17] !== 1'bx ) && ( PRDATA_prev[17] !== PRDATA_expected_prev[17] )
		&& ((PRDATA_expected_prev[17] !== last_PRDATA_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[17] = PRDATA_expected_prev[17];
	end
	if (
		( PRDATA_expected_prev[18] !== 1'bx ) && ( PRDATA_prev[18] !== PRDATA_expected_prev[18] )
		&& ((PRDATA_expected_prev[18] !== last_PRDATA_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[18] = PRDATA_expected_prev[18];
	end
	if (
		( PRDATA_expected_prev[19] !== 1'bx ) && ( PRDATA_prev[19] !== PRDATA_expected_prev[19] )
		&& ((PRDATA_expected_prev[19] !== last_PRDATA_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[19] = PRDATA_expected_prev[19];
	end
	if (
		( PRDATA_expected_prev[20] !== 1'bx ) && ( PRDATA_prev[20] !== PRDATA_expected_prev[20] )
		&& ((PRDATA_expected_prev[20] !== last_PRDATA_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[20] = PRDATA_expected_prev[20];
	end
	if (
		( PRDATA_expected_prev[21] !== 1'bx ) && ( PRDATA_prev[21] !== PRDATA_expected_prev[21] )
		&& ((PRDATA_expected_prev[21] !== last_PRDATA_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[21] = PRDATA_expected_prev[21];
	end
	if (
		( PRDATA_expected_prev[22] !== 1'bx ) && ( PRDATA_prev[22] !== PRDATA_expected_prev[22] )
		&& ((PRDATA_expected_prev[22] !== last_PRDATA_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[22] = PRDATA_expected_prev[22];
	end
	if (
		( PRDATA_expected_prev[23] !== 1'bx ) && ( PRDATA_prev[23] !== PRDATA_expected_prev[23] )
		&& ((PRDATA_expected_prev[23] !== last_PRDATA_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[23] = PRDATA_expected_prev[23];
	end
	if (
		( PRDATA_expected_prev[24] !== 1'bx ) && ( PRDATA_prev[24] !== PRDATA_expected_prev[24] )
		&& ((PRDATA_expected_prev[24] !== last_PRDATA_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[24] = PRDATA_expected_prev[24];
	end
	if (
		( PRDATA_expected_prev[25] !== 1'bx ) && ( PRDATA_prev[25] !== PRDATA_expected_prev[25] )
		&& ((PRDATA_expected_prev[25] !== last_PRDATA_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[25] = PRDATA_expected_prev[25];
	end
	if (
		( PRDATA_expected_prev[26] !== 1'bx ) && ( PRDATA_prev[26] !== PRDATA_expected_prev[26] )
		&& ((PRDATA_expected_prev[26] !== last_PRDATA_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[26] = PRDATA_expected_prev[26];
	end
	if (
		( PRDATA_expected_prev[27] !== 1'bx ) && ( PRDATA_prev[27] !== PRDATA_expected_prev[27] )
		&& ((PRDATA_expected_prev[27] !== last_PRDATA_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[27] = PRDATA_expected_prev[27];
	end
	if (
		( PRDATA_expected_prev[28] !== 1'bx ) && ( PRDATA_prev[28] !== PRDATA_expected_prev[28] )
		&& ((PRDATA_expected_prev[28] !== last_PRDATA_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[28] = PRDATA_expected_prev[28];
	end
	if (
		( PRDATA_expected_prev[29] !== 1'bx ) && ( PRDATA_prev[29] !== PRDATA_expected_prev[29] )
		&& ((PRDATA_expected_prev[29] !== last_PRDATA_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[29] = PRDATA_expected_prev[29];
	end
	if (
		( PRDATA_expected_prev[30] !== 1'bx ) && ( PRDATA_prev[30] !== PRDATA_expected_prev[30] )
		&& ((PRDATA_expected_prev[30] !== last_PRDATA_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[30] = PRDATA_expected_prev[30];
	end
	if (
		( PRDATA_expected_prev[31] !== 1'bx ) && ( PRDATA_prev[31] !== PRDATA_expected_prev[31] )
		&& ((PRDATA_expected_prev[31] !== last_PRDATA_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRDATA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRDATA_expected_prev);
		$display ("     Real value = %b", PRDATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PRDATA_exp[31] = PRDATA_expected_prev[31];
	end
	if (
		( fsm_cs_expected_prev[0] !== 1'bx ) && ( fsm_cs_prev[0] !== fsm_cs_expected_prev[0] )
		&& ((fsm_cs_expected_prev[0] !== last_fsm_cs_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fsm_cs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fsm_cs_expected_prev);
		$display ("     Real value = %b", fsm_cs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_fsm_cs_exp[0] = fsm_cs_expected_prev[0];
	end
	if (
		( fsm_cs_expected_prev[1] !== 1'bx ) && ( fsm_cs_prev[1] !== fsm_cs_expected_prev[1] )
		&& ((fsm_cs_expected_prev[1] !== last_fsm_cs_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fsm_cs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fsm_cs_expected_prev);
		$display ("     Real value = %b", fsm_cs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_fsm_cs_exp[1] = fsm_cs_expected_prev[1];
	end
	if (
		( fsm_cs_expected_prev[2] !== 1'bx ) && ( fsm_cs_prev[2] !== fsm_cs_expected_prev[2] )
		&& ((fsm_cs_expected_prev[2] !== last_fsm_cs_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fsm_cs[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fsm_cs_expected_prev);
		$display ("     Real value = %b", fsm_cs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_fsm_cs_exp[2] = fsm_cs_expected_prev[2];
	end
	if (
		( fsm_ns_expected_prev[0] !== 1'bx ) && ( fsm_ns_prev[0] !== fsm_ns_expected_prev[0] )
		&& ((fsm_ns_expected_prev[0] !== last_fsm_ns_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fsm_ns[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fsm_ns_expected_prev);
		$display ("     Real value = %b", fsm_ns_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_fsm_ns_exp[0] = fsm_ns_expected_prev[0];
	end
	if (
		( fsm_ns_expected_prev[1] !== 1'bx ) && ( fsm_ns_prev[1] !== fsm_ns_expected_prev[1] )
		&& ((fsm_ns_expected_prev[1] !== last_fsm_ns_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fsm_ns[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fsm_ns_expected_prev);
		$display ("     Real value = %b", fsm_ns_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_fsm_ns_exp[1] = fsm_ns_expected_prev[1];
	end
	if (
		( fsm_ns_expected_prev[2] !== 1'bx ) && ( fsm_ns_prev[2] !== fsm_ns_expected_prev[2] )
		&& ((fsm_ns_expected_prev[2] !== last_fsm_ns_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fsm_ns[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fsm_ns_expected_prev);
		$display ("     Real value = %b", fsm_ns_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_fsm_ns_exp[2] = fsm_ns_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module APB_Slave_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] PADDR;
reg PENABLE;
reg PSEL;
reg [31:0] PWDATA;
reg PWRITE;
reg RST_B;
reg SYSCLK;
// wires                                               
wire CNT_START;
wire [31:0] COUNT;
wire [31:0] COUNT_NS;
wire [31:0] EX_CON;
wire [31:0] EX_CON_NS;
wire [31:0] EX_TO;
wire [31:0] EX_TO_NS;
wire INT_B;
wire [31:0] PRDATA;
wire [2:0] fsm_cs;
wire [2:0] fsm_ns;

wire sampler;                             

// assign statements (if any)                          
APB_Slave i1 (
// port map - connection between master ports and signals/registers   
	.CNT_START(CNT_START),
	.COUNT(COUNT),
	.COUNT_NS(COUNT_NS),
	.EX_CON(EX_CON),
	.EX_CON_NS(EX_CON_NS),
	.EX_TO(EX_TO),
	.EX_TO_NS(EX_TO_NS),
	.INT_B(INT_B),
	.PADDR(PADDR),
	.PENABLE(PENABLE),
	.PRDATA(PRDATA),
	.PSEL(PSEL),
	.PWDATA(PWDATA),
	.PWRITE(PWRITE),
	.RST_B(RST_B),
	.SYSCLK(SYSCLK),
	.fsm_cs(fsm_cs),
	.fsm_ns(fsm_ns)
);

// SYSCLK
initial
begin
	SYSCLK = 1'b1;
	SYSCLK = #5000 1'b0;
	# 5000;
	repeat(98)
	begin
		SYSCLK = 1'b1;
		SYSCLK = #5000 1'b0;
		# 5000;
	end
	SYSCLK = 1'b1;
	SYSCLK = #5000 1'b0;
end 

// RST_B
initial
begin
	RST_B = 1'b1;
	RST_B = #10000 1'b0;
	RST_B = #10000 1'b1;
end 
// PADDR[ 4 ]
initial
begin
	PADDR[4] = 1'b0;
end 
// PADDR[ 3 ]
initial
begin
	PADDR[3] = 1'b0;
end 
// PADDR[ 2 ]
initial
begin
	PADDR[2] = 1'b0;
end 
// PADDR[ 1 ]
initial
begin
	PADDR[1] = 1'b0;
end 
// PADDR[ 0 ]
initial
begin
	PADDR[0] = 1'b0;
	PADDR[0] = #40000 1'b1;
	PADDR[0] = #20000 1'b0;
	PADDR[0] = #230000 1'b1;
	PADDR[0] = #20000 1'b0;
end 

// PWRITE
initial
begin
	PWRITE = 1'b0;
	PWRITE = #40000 1'b1;
	PWRITE = #250000 1'b0;
	PWRITE = #40000 1'b1;
end 

// PSEL
initial
begin
	PSEL = 1'b0;
	PSEL = #40000 1'b1;
	PSEL = #40000 1'b0;
	PSEL = #160000 1'b1;
	PSEL = #20000 1'b0;
	PSEL = #30000 1'b1;
	PSEL = #40000 1'b0;
end 

// PENABLE
initial
begin
	PENABLE = 1'b0;
	PENABLE = #50000 1'b1;
	PENABLE = #10000 1'b0;
	PENABLE = #10000 1'b1;
	PENABLE = #10000 1'b0;
	PENABLE = #170000 1'b1;
	PENABLE = #10000 1'b0;
	PENABLE = #40000 1'b1;
	PENABLE = #10000 1'b0;
	PENABLE = #10000 1'b1;
	PENABLE = #10000 1'b0;
end 
// PWDATA[ 31 ]
initial
begin
	PWDATA[31] = 1'b0;
end 
// PWDATA[ 30 ]
initial
begin
	PWDATA[30] = 1'b0;
end 
// PWDATA[ 29 ]
initial
begin
	PWDATA[29] = 1'b0;
end 
// PWDATA[ 28 ]
initial
begin
	PWDATA[28] = 1'b0;
end 
// PWDATA[ 27 ]
initial
begin
	PWDATA[27] = 1'b0;
end 
// PWDATA[ 26 ]
initial
begin
	PWDATA[26] = 1'b0;
end 
// PWDATA[ 25 ]
initial
begin
	PWDATA[25] = 1'b0;
end 
// PWDATA[ 24 ]
initial
begin
	PWDATA[24] = 1'b0;
end 
// PWDATA[ 23 ]
initial
begin
	PWDATA[23] = 1'b0;
end 
// PWDATA[ 22 ]
initial
begin
	PWDATA[22] = 1'b0;
end 
// PWDATA[ 21 ]
initial
begin
	PWDATA[21] = 1'b0;
end 
// PWDATA[ 20 ]
initial
begin
	PWDATA[20] = 1'b0;
end 
// PWDATA[ 19 ]
initial
begin
	PWDATA[19] = 1'b0;
end 
// PWDATA[ 18 ]
initial
begin
	PWDATA[18] = 1'b0;
end 
// PWDATA[ 17 ]
initial
begin
	PWDATA[17] = 1'b0;
end 
// PWDATA[ 16 ]
initial
begin
	PWDATA[16] = 1'b0;
end 
// PWDATA[ 15 ]
initial
begin
	PWDATA[15] = 1'b0;
end 
// PWDATA[ 14 ]
initial
begin
	PWDATA[14] = 1'b0;
end 
// PWDATA[ 13 ]
initial
begin
	PWDATA[13] = 1'b0;
end 
// PWDATA[ 12 ]
initial
begin
	PWDATA[12] = 1'b0;
end 
// PWDATA[ 11 ]
initial
begin
	PWDATA[11] = 1'b0;
end 
// PWDATA[ 10 ]
initial
begin
	PWDATA[10] = 1'b0;
end 
// PWDATA[ 9 ]
initial
begin
	PWDATA[9] = 1'b0;
end 
// PWDATA[ 8 ]
initial
begin
	PWDATA[8] = 1'b0;
end 
// PWDATA[ 7 ]
initial
begin
	PWDATA[7] = 1'b0;
end 
// PWDATA[ 6 ]
initial
begin
	PWDATA[6] = 1'b0;
end 
// PWDATA[ 5 ]
initial
begin
	PWDATA[5] = 1'b0;
end 
// PWDATA[ 4 ]
initial
begin
	PWDATA[4] = 1'b0;
end 
// PWDATA[ 3 ]
initial
begin
	PWDATA[3] = 1'b0;
	PWDATA[3] = #240000 1'b1;
	PWDATA[3] = #20000 1'b0;
end 
// PWDATA[ 2 ]
initial
begin
	PWDATA[2] = 1'b0;
	PWDATA[2] = #40000 1'b1;
	PWDATA[2] = #40000 1'b0;
end 
// PWDATA[ 1 ]
initial
begin
	PWDATA[1] = 1'b0;
	PWDATA[1] = #60000 1'b1;
	PWDATA[1] = #20000 1'b0;
end 
// PWDATA[ 0 ]
initial
begin
	PWDATA[0] = 1'b0;
end 

APB_Slave_vlg_sample_tst tb_sample (
	.PADDR(PADDR),
	.PENABLE(PENABLE),
	.PSEL(PSEL),
	.PWDATA(PWDATA),
	.PWRITE(PWRITE),
	.RST_B(RST_B),
	.SYSCLK(SYSCLK),
	.sampler_tx(sampler)
);

APB_Slave_vlg_check_tst tb_out(
	.CNT_START(CNT_START),
	.COUNT(COUNT),
	.COUNT_NS(COUNT_NS),
	.EX_CON(EX_CON),
	.EX_CON_NS(EX_CON_NS),
	.EX_TO(EX_TO),
	.EX_TO_NS(EX_TO_NS),
	.INT_B(INT_B),
	.PRDATA(PRDATA),
	.fsm_cs(fsm_cs),
	.fsm_ns(fsm_ns),
	.sampler_rx(sampler)
);
endmodule

